diff --git policycoreutils-2.6/gui/Makefile policycoreutils-2.6/gui/Makefile
index 9d9f820..0c2b390 100644
--- policycoreutils-2.6/gui/Makefile
+++ policycoreutils-2.6/gui/Makefile
@@ -12,7 +12,6 @@ domainsPage.py \
 fcontextPage.py \
 html_util.py \
 loginsPage.py \
-mappingsPage.py \
 modulesPage.py \
 polgen.glade \
 portsPage.py \
diff --git policycoreutils-2.6/gui/booleansPage.py policycoreutils-2.6/gui/booleansPage.py
index a5d04bf..bd1fe3d 100644
--- policycoreutils-2.6/gui/booleansPage.py
+++ policycoreutils-2.6/gui/booleansPage.py
@@ -18,13 +18,10 @@
 # You should have received a copy of the GNU General Public License
 # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 #
-import string
 import gtk
 import gtk.glade
-import os
 import gobject
 import sys
-import tempfile
 import seobject
 import semanagePage
 
@@ -117,8 +114,6 @@ class booleansPage:
         self.revertButton = xml.get_widget("booleanRevertButton")
         self.revertButton.set_sensitive(self.local)
         self.revertButton.connect("clicked", self.on_revert_clicked)
-        listStore = gtk.ListStore(gobject.TYPE_STRING)
-        cell = gtk.CellRendererText()
 
         self.store = gtk.ListStore(gobject.TYPE_BOOLEAN, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING)
         self.store.set_sort_column_id(1, gtk.SORT_ASCENDING)
@@ -184,6 +179,7 @@ class booleansPage:
         # change cursor
         if boolean == None:
             return
+        self.wait()
         try:
             self.wait()
             (rc, out) = getstatusoutput("semanage boolean -d %s" % boolean)
diff --git policycoreutils-2.6/gui/domainsPage.py policycoreutils-2.6/gui/domainsPage.py
index 66f882a..eefdbe3 100644
--- policycoreutils-2.6/gui/domainsPage.py
+++ policycoreutils-2.6/gui/domainsPage.py
@@ -126,6 +126,8 @@ class domainsPage(semanagePage):
         selection = self.view.get_selection()
         store, iter = selection.get_selected()
         domain = store.get_value(iter, 0)
+        self.wait()
+        cmd = "semanage permissive -d %s_t" % domain
         try:
             self.wait()
             status, output = getstatusoutput("semanage permissive -d %s_t" % domain)
@@ -151,6 +153,8 @@ class domainsPage(semanagePage):
         selection = self.view.get_selection()
         store, iter = selection.get_selected()
         domain = store.get_value(iter, 0)
+        self.wait()
+        cmd = "semanage permissive -a %s_t" % domain
         try:
             self.wait()
             status, output = getstatusoutput("semanage permissive -a %s_t" % domain)
diff --git policycoreutils-2.6/gui/fcontextPage.py policycoreutils-2.6/gui/fcontextPage.py
index c176de4..88500bf 100644
--- policycoreutils-2.6/gui/fcontextPage.py
+++ policycoreutils-2.6/gui/fcontextPage.py
@@ -18,7 +18,6 @@
 ## Author: Dan Walsh
 import gtk
 import gtk.glade
-import os
 import gobject
 import seobject
 try:
@@ -105,19 +104,12 @@ class fcontextPage(semanagePage):
         self.load()
         self.fcontextEntry = xml.get_widget("fcontextEntry")
         self.fcontextFileTypeCombo = xml.get_widget("fcontextFileTypeCombo")
-        liststore = self.fcontextFileTypeCombo.get_model()
-        for k in seobject.file_types:
-            if len(k) > 0 and k[0] != '-':
-                iter = liststore.append()
-                liststore.set_value(iter, 0, k)
-        iter = liststore.get_iter_first()
-        self.fcontextFileTypeCombo.set_active_iter(iter)
         self.fcontextTypeEntry = xml.get_widget("fcontextTypeEntry")
         self.fcontextMLSEntry = xml.get_widget("fcontextMLSEntry")
 
-    def match(self, fcon_dict, k, filter):
+    def match(self, fcon_dict, k, filt):
         try:
-            f = filter.lower()
+            f=filt.lower()
             for con in k:
                 k = con.lower()
                 if k.find(f) >= 0:
@@ -130,44 +122,44 @@ class fcontextPage(semanagePage):
             pass
         return False
 
-    def load(self, filter=""):
-        self.filter = filter
-        self.fcontext = seobject.fcontextRecords()
+    def load(self, filt=""):
+        self.filter=filt
+        self.fcontext=seobject.fcontextRecords()
         self.store.clear()
         fcon_dict = self.fcontext.get_all(self.local)
         for k in sorted(fcon_dict.keys()):
             if not self.match(fcon_dict, k, filter):
                 continue
-            iter = self.store.append()
-            self.store.set_value(iter, SPEC_COL, k[0])
-            self.store.set_value(iter, FTYPE_COL, k[1])
+            it=self.store.append()
+            self.store.set_value(it, SPEC_COL, k[0])
+            self.store.set_value(it, FTYPE_COL, k[1])
             if fcon_dict[k]:
                 rec = "%s:%s" % (fcon_dict[k][2], seobject.translate(fcon_dict[k][3], False))
             else:
-                rec = "<<None>>"
-            self.store.set_value(iter, TYPE_COL, rec)
-        self.view.get_selection().select_path((0,))
+                rec="<<None>>"
+            self.store.set_value(it, TYPE_COL, rec)
+        self.view.get_selection().select_path ((0,))
 
     def filter_changed(self, *arg):
-        filter = arg[0].get_text()
-        if filter != self.filter:
-            self.load(filter)
+        filt =  arg[0].get_text()
+        if filt != self.filter:
+            self.load(filt)
 
     def dialogInit(self):
-        store, iter = self.view.get_selection().get_selected()
-        self.fcontextEntry.set_text(store.get_value(iter, SPEC_COL))
+        store, it = self.view.get_selection().get_selected()
+        self.fcontextEntry.set_text(store.get_value(it, SPEC_COL))
         self.fcontextEntry.set_sensitive(False)
-        scontext = store.get_value(iter, TYPE_COL)
-        scon = context(scontext)
+        scontext = store.get_value(it, TYPE_COL)
+        scon=context(scontext)
         self.fcontextTypeEntry.set_text(scon.type)
         self.fcontextMLSEntry.set_text(scon.mls)
-        type = store.get_value(iter, FTYPE_COL)
-        liststore = self.fcontextFileTypeCombo.get_model()
-        iter = liststore.get_iter_first()
-        while iter != None and liststore.get_value(iter, 0) != type:
-            iter = liststore.iter_next(iter)
-        if iter != None:
-            self.fcontextFileTypeCombo.set_active_iter(iter)
+        setype=store.get_value(it, FTYPE_COL)
+        liststore=self.fcontextFileTypeCombo.get_model()
+        it = liststore.get_iter_first()
+        while it != None and liststore.get_value(it,0) != setype:
+            it = liststore.iter_next(it)
+        if it != None:
+            self.fcontextFileTypeCombo.set_active_iter(it)
         self.fcontextFileTypeCombo.set_sensitive(False)
 
     def dialogClear(self):
@@ -178,7 +170,10 @@ class fcontextPage(semanagePage):
         self.fcontextMLSEntry.set_text("s0")
 
     def delete(self):
-        store, iter = self.view.get_selection().get_selected()
+        store, it = self.view.get_selection().get_selected()
+        fspec=store.get_value(it, SPEC_COL)
+        ftype=store.get_value(it, FTYPE_COL)
+        self.wait()
         try:
             fspec = store.get_value(iter, SPEC_COL)
             ftype = store.get_value(iter, FTYPE_COL)
@@ -194,12 +189,12 @@ class fcontextPage(semanagePage):
             self.error(e.args[0])
 
     def add(self):
-        ftype = ["", "--", "-d", "-c", "-b", "-s", "-l", "-p"]
-        fspec = self.fcontextEntry.get_text().strip()
-        type = self.fcontextTypeEntry.get_text().strip()
-        mls = self.fcontextMLSEntry.get_text().strip()
-        list_model = self.fcontextFileTypeCombo.get_model()
-        active = self.fcontextFileTypeCombo.get_active()
+        fspec=self.fcontextEntry.get_text().strip()
+        setype=self.fcontextTypeEntry.get_text().strip()
+        mls=self.fcontextMLSEntry.get_text().strip()
+        list_model=self.fcontextFileTypeCombo.get_model()
+        it = self.fcontextFileTypeCombo.get_active_iter()
+        ftype=list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage fcontext -a -t %s -r %s -f '%s' '%s'" % (type, mls, ftype[active], fspec))
         self.ready()
@@ -207,26 +202,16 @@ class fcontextPage(semanagePage):
             self.error(out)
             return False
 
-        iter = self.store.append()
-        self.store.set_value(iter, SPEC_COL, fspec)
-        self.store.set_value(iter, FTYPE_COL, ftype)
-        self.store.set_value(iter, TYPE_COL, "%s:%s" % (type, mls))
-
     def modify(self):
-        fspec = self.fcontextEntry.get_text().strip()
-        type = self.fcontextTypeEntry.get_text().strip()
-        mls = self.fcontextMLSEntry.get_text().strip()
-        list_model = self.fcontextFileTypeCombo.get_model()
-        iter = self.fcontextFileTypeCombo.get_active_iter()
-        ftype = list_model.get_value(iter, 0)
+        fspec=self.fcontextEntry.get_text().strip()
+        setype=self.fcontextTypeEntry.get_text().strip()
+        mls=self.fcontextMLSEntry.get_text().strip()
+        list_model=self.fcontextFileTypeCombo.get_model()
+        it = self.fcontextFileTypeCombo.get_active_iter()
+        ftype=list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage fcontext -m -t %s -r %s -f '%s' '%s'" % (type, mls, ftype, fspec))
         self.ready()
         if rc != 0:
             self.error(out)
             return False
-
-        store, iter = self.view.get_selection().get_selected()
-        self.store.set_value(iter, SPEC_COL, fspec)
-        self.store.set_value(iter, FTYPE_COL, ftype)
-        self.store.set_value(iter, TYPE_COL, "%s:%s" % (type, mls))
diff --git policycoreutils-2.6/gui/html_util.py policycoreutils-2.6/gui/html_util.py
index e93c20c..6b29445 100644
--- policycoreutils-2.6/gui/html_util.py
+++ policycoreutils-2.6/gui/html_util.py
@@ -161,7 +161,7 @@ def html_document(*body_components):
         elif type(body_component) in [TupleType, ListType]:
             for item in body_component:
                 doc += item
-        elif callable(body_component):
+        elif isinstance(body_component, collections.Callable):
             result = body_component()
             if type(result) in [TupleType, ListType]:
                 for item in result:
diff --git policycoreutils-2.6/gui/loginsPage.py policycoreutils-2.6/gui/loginsPage.py
index 1f35a57..ab2065d 100644
--- policycoreutils-2.6/gui/loginsPage.py
+++ policycoreutils-2.6/gui/loginsPage.py
@@ -16,10 +16,8 @@
 ## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 ## Author: Dan Walsh
-import string
 import gtk
 import gtk.glade
-import os
 import gobject
 import sys
 try:
@@ -84,14 +82,14 @@ class loginsPage(semanagePage):
             range = seobject.translate(dict[k][1])
             if not (self.match(k, filter) or self.match(dict[k][0], filter) or self.match(range, filter)):
                 continue
-            iter = self.store.append()
-            self.store.set_value(iter, 0, k)
-            self.store.set_value(iter, 1, dict[k][0])
-            self.store.set_value(iter, 2, range)
-        self.view.get_selection().select_path((0,))
+            it = self.store.append()
+            self.store.set_value(it, 0, k)
+            self.store.set_value(it, 1, dict[k][0])
+            self.store.set_value(it, 2, range)
+        self.view.get_selection().select_path ((0,))
 
     def __dialogSetup(self):
-        if self.firstTime == True:
+        if self.firstTime:
             return
         self.firstTime = True
         liststore = gtk.ListStore(gobject.TYPE_STRING)
@@ -105,25 +103,25 @@ class loginsPage(semanagePage):
             if k != "system_u":
                 self.loginsSelinuxUserCombo.append_text(k)
 
-        iter = liststore.get_iter_first()
-        while liststore.get_value(iter, 0) != "user_u":
-            iter = liststore.iter_next(iter)
-        self.loginsSelinuxUserCombo.set_active_iter(iter)
+        it = liststore.get_iter_first()
+        while liststore.get_value(it,0) != "user_u":
+            it = liststore.iter_next(it)
+        self.loginsSelinuxUserCombo.set_active_iter(it)
 
     def dialogInit(self):
         self.__dialogSetup()
-        store, iter = self.view.get_selection().get_selected()
-        self.loginsNameEntry.set_text(store.get_value(iter, 0))
+        store, it = self.view.get_selection().get_selected()
+        self.loginsNameEntry.set_text(store.get_value(it, 0))
         self.loginsNameEntry.set_sensitive(False)
 
-        self.loginsMLSEntry.set_text(store.get_value(iter, 2))
-        seuser = store.get_value(iter, 1)
+        self.loginsMLSEntry.set_text(store.get_value(it, 2))
+        seuser = store.get_value(it, 1)
         liststore = self.loginsSelinuxUserCombo.get_model()
-        iter = liststore.get_iter_first()
-        while iter != None and liststore.get_value(iter, 0) != seuser:
-            iter = liststore.iter_next(iter)
-        if iter != None:
-            self.loginsSelinuxUserCombo.set_active_iter(iter)
+        it = liststore.get_iter_first()
+        while it != None and liststore.get_value(it,0) != seuser:
+            it = liststore.iter_next(it)
+        if it != None:
+            self.loginsSelinuxUserCombo.set_active_iter(it)
 
     def dialogClear(self):
         self.__dialogSetup()
@@ -132,9 +130,9 @@ class loginsPage(semanagePage):
         self.loginsMLSEntry.set_text("s0")
 
     def delete(self):
-        store, iter = self.view.get_selection().get_selected()
+        store, it = self.view.get_selection().get_selected()
         try:
-            login = store.get_value(iter, 0)
+            login=store.get_value(it, 0)
             if login == "root" or login == "__default__":
                 raise ValueError(_("Login '%s' is required") % login)
 
@@ -153,10 +151,10 @@ class loginsPage(semanagePage):
         target = self.loginsNameEntry.get_text().strip()
         serange = self.loginsMLSEntry.get_text().strip()
         if serange == "":
-            serange = "s0"
-        list_model = self.loginsSelinuxUserCombo.get_model()
-        iter = self.loginsSelinuxUserCombo.get_active_iter()
-        seuser = list_model.get_value(iter, 0)
+            serange="s0"
+        list_model=self.loginsSelinuxUserCombo.get_model()
+        it = self.loginsSelinuxUserCombo.get_active_iter()
+        seuser = list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage login -a -s %s -r %s %s" % (seuser, serange, target))
         self.ready()
@@ -164,27 +162,17 @@ class loginsPage(semanagePage):
             self.error(out)
             return False
 
-        iter = self.store.append()
-        self.store.set_value(iter, 0, target)
-        self.store.set_value(iter, 1, seuser)
-        self.store.set_value(iter, 2, seobject.translate(serange))
-
     def modify(self):
         target = self.loginsNameEntry.get_text().strip()
         serange = self.loginsMLSEntry.get_text().strip()
         if serange == "":
             serange = "s0"
         list_model = self.loginsSelinuxUserCombo.get_model()
-        iter = self.loginsSelinuxUserCombo.get_active_iter()
-        seuser = list_model.get_value(iter, 0)
+        it = self.loginsSelinuxUserCombo.get_active_iter()
+        seuser=list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage login -m -s %s -r %s %s" % (seuser, serange, target))
         self.ready()
         if rc != 0:
             self.error(out)
             return False
-
-        store, iter = self.view.get_selection().get_selected()
-        self.store.set_value(iter, 0, target)
-        self.store.set_value(iter, 1, seuser)
-        self.store.set_value(iter, 2, seobject.translate(serange))
diff --git policycoreutils-2.6/gui/modulesPage.py policycoreutils-2.6/gui/modulesPage.py
index 3767896..fe12b99 100644
--- policycoreutils-2.6/gui/modulesPage.py
+++ policycoreutils-2.6/gui/modulesPage.py
@@ -96,8 +96,8 @@ class modulesPage(semanagePage):
         except:
             return 0
 
-    def load(self, filter=""):
-        self.filter = filter
+    def load(self, filt=""):
+        self.filter=filt
         self.store.clear()
         try:
             fd = Popen("semodule -l", shell=True, stdout=PIPE).stdout
@@ -105,11 +105,11 @@ class modulesPage(semanagePage):
             fd.close()
             for i in l:
                 module, ver, newline = i.split('\t')
-                if not (self.match(module, filter) or self.match(ver, filter)):
+                if not (self.match(module, filt) or self.match(ver, filt)):
                     continue
-                iter = self.store.append()
-                self.store.set_value(iter, 0, module.strip())
-                self.store.set_value(iter, 1, ver.strip())
+                it = self.store.append()
+                self.store.set_value(it, 0, module.strip())
+                self.store.set_value(it, 1, ver.strip())
         except:
             pass
         self.view.get_selection().select_path((0,))
@@ -121,8 +121,9 @@ class modulesPage(semanagePage):
             self.error(e.args[0])
 
     def delete(self):
-        store, iter = self.view.get_selection().get_selected()
-        module = store.get_value(iter, 0)
+        store, it = self.view.get_selection().get_selected()
+        module = store.get_value(it, 0)
+        self.wait()
         try:
             self.wait()
             status, output = getstatusoutput("semodule -r %s" % module)
@@ -138,6 +139,13 @@ class modulesPage(semanagePage):
 
     def enable_audit(self, button):
         self.audit_enabled = not self.audit_enabled
+        if self.audit_enabled:
+            cmd = "semodule -DB"
+            label = _("Disable Audit")
+        else:
+            cmd = "semodule -B"
+            label = _("Enable Audit")
+        self.wait()
         try:
             self.wait()
             if self.audit_enabled:
@@ -155,6 +163,8 @@ class modulesPage(semanagePage):
             self.error(e.args[0])
 
     def disable_audit(self, button):
+        self.wait()
+        cmd = "semodule -B"
         try:
             self.wait()
             status, output = getstatusoutput("semodule -B")
@@ -177,10 +187,10 @@ class modulesPage(semanagePage):
                                         gtk.STOCK_OPEN, gtk.RESPONSE_OK))
         dialog.set_default_response(gtk.RESPONSE_OK)
 
-        filter = gtk.FileFilter()
-        filter.set_name("Policy Files")
-        filter.add_pattern("*.pp")
-        dialog.add_filter(filter)
+        filt = gtk.FileFilter()
+        filt.set_name("Policy Files")
+        filt.add_pattern("*.pp")
+        dialog.add_filter(filt)
 
         response = dialog.run()
         if response == gtk.RESPONSE_OK:
@@ -188,6 +198,8 @@ class modulesPage(semanagePage):
         dialog.destroy()
 
     def add(self, file):
+        self.wait()
+        cmd = "semodule -i %s" % file
         try:
             self.wait()
             status, output = getstatusoutput("semodule -i %s" % file)
diff --git policycoreutils-2.6/gui/polgen.glade policycoreutils-2.6/gui/polgen.glade
index 37c1472..9854fb2 100644
--- policycoreutils-2.6/gui/polgen.glade
+++ policycoreutils-2.6/gui/polgen.glade
@@ -758,7 +758,7 @@
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
                         <property name="use_underline">True</property>
-                        <signal name="clicked" handler="on_exec_select_clicked" swapped="no"/>
+                        <signal name="clicked" handler="on_exec_select_clicked"/>
                       </widget>
                       <packing>
                         <property name="left_attach">2</property>
@@ -840,7 +840,7 @@
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
                         <property name="use_underline">True</property>
-                        <signal name="clicked" handler="on_init_script_select_clicked" swapped="no"/>
+                        <signal name="clicked" handler="on_init_script_select_clicked" />
                       </widget>
                       <packing>
                         <property name="left_attach">2</property>
@@ -1983,7 +1983,7 @@ Tab</property>
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
-                            <signal name="clicked" handler="on_add_clicked" swapped="no"/>
+                            <signal name="clicked" handler="on_add_clicked" />
                             <child>
                               <widget class="GtkAlignment" id="alignment6">
                                 <property name="visible">True</property>
@@ -2036,7 +2036,7 @@ Tab</property>
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
-                            <signal name="clicked" handler="on_add_dir_clicked" swapped="no"/>
+                            <signal name="clicked" handler="on_add_dir_clicked" />
                             <child>
                               <widget class="GtkAlignment" id="alignment5">
                                 <property name="visible">True</property>
@@ -2091,7 +2091,7 @@ Tab</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
                             <property name="use_stock">True</property>
-                            <signal name="clicked" handler="on_delete_clicked" swapped="no"/>
+                            <signal name="clicked" handler="on_delete_clicked" />
                             <accelerator key="Delete" signal="clicked"/>
                           </widget>
                           <packing>
@@ -2188,7 +2188,7 @@ Tab</property>
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
-                            <signal name="clicked" handler="on_add_boolean_clicked" swapped="no"/>
+                            <signal name="clicked" handler="on_add_boolean_clicked" />
                             <child>
                               <widget class="GtkAlignment" id="alignment1">
                                 <property name="visible">True</property>
@@ -2243,7 +2243,7 @@ Tab</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
                             <property name="use_stock">True</property>
-                            <signal name="clicked" handler="on_delete_boolean_clicked" swapped="no"/>
+                            <signal name="clicked" handler="on_delete_boolean_clicked" />
                             <accelerator key="Delete" signal="clicked"/>
                           </widget>
                           <packing>
@@ -2414,7 +2414,7 @@ Tab</property>
                 <property name="can_default">True</property>
                 <property name="receives_default">False</property>
                 <property name="use_stock">True</property>
-                <signal name="activate" handler="on_cancel_activate" swapped="no"/>
+                <signal name="activate" handler="on_cancel_activate" />
               </widget>
               <packing>
                 <property name="expand">False</property>
@@ -2430,7 +2430,7 @@ Tab</property>
                 <property name="can_default">True</property>
                 <property name="receives_default">False</property>
                 <property name="use_stock">True</property>
-                <signal name="activate" handler="on_back_activate" swapped="no"/>
+                <signal name="activate" handler="on_back_activate" />
               </widget>
               <packing>
                 <property name="expand">False</property>
@@ -2446,7 +2446,7 @@ Tab</property>
                 <property name="can_default">True</property>
                 <property name="receives_default">False</property>
                 <property name="use_stock">True</property>
-                <signal name="activate" handler="on_forward_activate" swapped="no"/>
+                <signal name="activate" handler="on_forward_activate" />
               </widget>
               <packing>
                 <property name="expand">False</property>
diff --git policycoreutils-2.6/gui/polgengui.py policycoreutils-2.6/gui/polgengui.py
index 1d262a9..110c5c6 100644
--- policycoreutils-2.6/gui/polgengui.py
+++ policycoreutils-2.6/gui/polgengui.py
@@ -33,7 +33,7 @@ try:
 except ValueError as e:
     sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
     sys.exit(1)
-
+    
 import sepolicy.interface
 try:
     from subprocess import getstatusoutput
@@ -273,8 +273,8 @@ class childWindow:
         self.out_udp_entry = self.xml.get_widget("out_udp_entry")
         self.network_buttons[self.out_udp_all_checkbutton] = [self.out_udp_entry]
 
-        for b in self.network_buttons.keys():
-            b.connect("clicked", self.network_all_clicked)
+        for b in list(self.network_buttons.keys()):
+            b.connect("clicked",self.network_all_clicked)
 
         self.boolean_treeview = self.xml.get_widget("boolean_treeview")
         self.boolean_store = gtk.ListStore(gobject.TYPE_STRING, gobject.TYPE_STRING)
@@ -679,7 +679,7 @@ class childWindow:
                     entry.set_text("")
                     return False
             if name in self.all_modules:
-                if self.verify(_("Module %s.pp already loaded in current policy.\nDo you want to continue?") % name, _("Verify Name")) == gtk.RESPONSE_NO:
+                if self.verify(_("Module %s already loaded in current policy.\nDo you want to continue?") % name, _("Verify Name")) == gtk.RESPONSE_NO:
                     entry.set_text("")
                     return False
 
@@ -745,12 +745,12 @@ class childWindow:
             policy.set_program(exe)
             policy.gen_writeable()
             policy.gen_symbols()
-            for f in policy.files.keys():
+            for f in list(policy.files.keys()):
                 iter = self.store.append()
                 self.store.set_value(iter, 0, f)
                 self.store.set_value(iter, 1, FILE)
 
-            for f in policy.dirs.keys():
+            for f in list(policy.dirs.keys()):
                 iter = self.store.append()
                 self.store.set_value(iter, 0, f)
                 self.store.set_value(iter, 1, DIR)
diff --git policycoreutils-2.6/gui/portsPage.py policycoreutils-2.6/gui/portsPage.py
index b6445db..f2287b4 100644
--- policycoreutils-2.6/gui/portsPage.py
+++ policycoreutils-2.6/gui/portsPage.py
@@ -16,12 +16,9 @@
 ## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 ## Author: Dan Walsh
-import string
 import gtk
 import gtk.glade
-import os
 import gobject
-import sys
 import seobject
 try:
     from subprocess import getstatusoutput
@@ -69,19 +66,19 @@ class portsPage(semanagePage):
         self.ports_properties_button = xml.get_widget("portsPropertiesButton")
         self.ports_delete_button = xml.get_widget("portsDeleteButton")
         liststore = self.ports_protocol_combo.get_model()
-        iter = liststore.get_iter_first()
-        self.ports_protocol_combo.set_active_iter(iter)
+        it = liststore.get_iter_first()
+        self.ports_protocol_combo.set_active_iter(it)
         self.init_store()
         self.edit = True
         self.load()
 
     def filter_changed(self, *arg):
-        filter = arg[0].get_text()
-        if filter != self.filter:
+        filt =  arg[0].get_text()
+        if filt != self.filter:
             if self.edit:
-                self.load(filter)
+                self.load(filt)
             else:
-                self.group_load(filter)
+                self.group_load(filt)
 
     def init_store(self):
         self.store = gtk.ListStore(gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING)
@@ -123,27 +120,27 @@ class portsPage(semanagePage):
         except:
             return 0
 
-    def load(self, filter=""):
-        self.filter = filter
+    def load(self,filt = ""):
+        self.filter=filt
         self.port = seobject.portRecords()
         dict = self.port.get_all(self.local)
         self.store.clear()
         for k in sorted(dict.keys()):
             if not (self.match(str(k[0]), filter) or self.match(dict[k][0], filter) or self.match(k[2], filter) or self.match(dict[k][1], filter) or self.match(dict[k][1], filter)):
                 continue
-            iter = self.store.append()
+            it = self.store.append()
             if k[0] == k[1]:
-                self.store.set_value(iter, PORT_COL, k[0])
+                self.store.set_value(it, PORT_COL, k[0])
             else:
                 rec = "%s-%s" % k[:2]
-                self.store.set_value(iter, PORT_COL, rec)
-            self.store.set_value(iter, TYPE_COL, dict[k][0])
-            self.store.set_value(iter, PROTOCOL_COL, k[2])
-            self.store.set_value(iter, MLS_COL, dict[k][1])
-        self.view.get_selection().select_path((0,))
-
-    def group_load(self, filter=""):
-        self.filter = filter
+                self.store.set_value(it, PORT_COL, rec)
+            self.store.set_value(it, TYPE_COL, pdict[k][0])
+            self.store.set_value(it, PROTOCOL_COL, k[2])
+            self.store.set_value(it, MLS_COL, pdict[k][1])
+        self.view.get_selection().select_path ((0,))
+
+    def group_load(self, filt = ""):
+        self.filter=filt
         self.port = seobject.portRecords()
         dict = self.port.get_all_by_type(self.local)
         self.store.clear()
@@ -151,31 +148,31 @@ class portsPage(semanagePage):
             ports_string = ", ".join(dict[k])
             if not (self.match(ports_string, filter) or self.match(k[0], filter) or self.match(k[1], filter)):
                 continue
-            iter = self.store.append()
-            self.store.set_value(iter, TYPE_COL, k[0])
-            self.store.set_value(iter, PROTOCOL_COL, k[1])
-            self.store.set_value(iter, PORT_COL, ports_string)
-            self.store.set_value(iter, MLS_COL, "")
-        self.view.get_selection().select_path((0,))
+            it = self.store.append()
+            self.store.set_value(it, TYPE_COL, k[0])
+            self.store.set_value(it, PROTOCOL_COL, k[1])
+            self.store.set_value(it, PORT_COL, ports_string)
+            self.store.set_value(it, MLS_COL, "")
+        self.view.get_selection().select_path ((0,))
 
     def propertiesDialog(self):
         if self.edit:
             semanagePage.propertiesDialog(self)
 
     def dialogInit(self):
-        store, iter = self.view.get_selection().get_selected()
-        self.ports_number_entry.set_text(store.get_value(iter, PORT_COL))
+        store, it = self.view.get_selection().get_selected()
+        self.ports_number_entry.set_text(store.get_value(it, PORT_COL))
         self.ports_number_entry.set_sensitive(False)
         self.ports_protocol_combo.set_sensitive(False)
-        self.ports_name_entry.set_text(store.get_value(iter, TYPE_COL))
-        self.ports_mls_entry.set_text(store.get_value(iter, MLS_COL))
-        protocol = store.get_value(iter, PROTOCOL_COL)
+        self.ports_name_entry.set_text(store.get_value(it, TYPE_COL))
+        self.ports_mls_entry.set_text(store.get_value(it, MLS_COL))
+        protocol = store.get_value(it, PROTOCOL_COL)
         liststore = self.ports_protocol_combo.get_model()
-        iter = liststore.get_iter_first()
-        while iter != None and liststore.get_value(iter, 0) != protocol:
-            iter = liststore.iter_next(iter)
-        if iter != None:
-            self.ports_protocol_combo.set_active_iter(iter)
+        it = liststore.get_iter_first()
+        while it != None and liststore.get_value(it,0) != protocol:
+            it = liststore.iter_next(it)
+        if it != None:
+            self.ports_protocol_combo.set_active_iter(it)
 
     def dialogClear(self):
         self.ports_number_entry.set_text("")
@@ -185,9 +182,11 @@ class portsPage(semanagePage):
         self.ports_mls_entry.set_text("s0")
 
     def delete(self):
-        store, iter = self.view.get_selection().get_selected()
-        port = store.get_value(iter, PORT_COL)
-        protocol = store.get_value(iter, 1)
+        store, it = self.view.get_selection().get_selected()
+        port = store.get_value(it, PORT_COL)
+        protocol = store.get_value(it, 1)
+        self.wait()
+        cmd = "semanage port -d -p %s %s" % (protocol, port)
         try:
             self.wait()
             (rc, out) = getstatusoutput("semanage port -d -p %s %s" % (protocol, port))
@@ -210,39 +209,25 @@ class portsPage(semanagePage):
                 self.error(_("Port number \"%s\" is not valid.  0 < PORT_NUMBER < 65536 ") % port_number)
                 return False
         list_model = self.ports_protocol_combo.get_model()
-        iter = self.ports_protocol_combo.get_active_iter()
-        protocol = list_model.get_value(iter, 0)
+        it = self.ports_protocol_combo.get_active_iter()
+        protocol = list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage port -a -p %s -r %s -t %s %s" % (protocol, mls, target, port_number))
         self.ready()
-        if rc != 0:
-            self.error(out)
-            return False
-        iter = self.store.append()
-
-        self.store.set_value(iter, TYPE_COL, target)
-        self.store.set_value(iter, PORT_COL, port_number)
-        self.store.set_value(iter, PROTOCOL_COL, protocol)
-        self.store.set_value(iter, MLS_COL, mls)
 
     def modify(self):
         target = self.ports_name_entry.get_text().strip()
         mls = self.ports_mls_entry.get_text().strip()
         port_number = self.ports_number_entry.get_text().strip()
         list_model = self.ports_protocol_combo.get_model()
-        iter = self.ports_protocol_combo.get_active_iter()
-        protocol = list_model.get_value(iter, 0)
+        it = self.ports_protocol_combo.get_active_iter()
+        protocol = list_model.get_value(it,0)
         self.wait()
         (rc, out) = getstatusoutput("semanage port -m -p %s -r %s -t %s %s" % (protocol, mls, target, port_number))
         self.ready()
         if rc != 0:
             self.error(out)
             return False
-        store, iter = self.view.get_selection().get_selected()
-        self.store.set_value(iter, TYPE_COL, target)
-        self.store.set_value(iter, PORT_COL, port_number)
-        self.store.set_value(iter, PROTOCOL_COL, protocol)
-        self.store.set_value(iter, MLS_COL, mls)
 
     def on_group_clicked(self, button):
         self.ports_add_button.set_sensitive(self.group)
diff --git policycoreutils-2.6/gui/semanagePage.py policycoreutils-2.6/gui/semanagePage.py
index 1f14d56..02df13b 100644
--- policycoreutils-2.6/gui/semanagePage.py
+++ policycoreutils-2.6/gui/semanagePage.py
@@ -85,9 +85,9 @@ class semanagePage:
         return
 
     def filter_changed(self, *arg):
-        filter = arg[0].get_text()
-        if filter != self.filter:
-            self.load(filter)
+        filt =  arg[0].get_text()
+        if filt != self.filter:
+            self.load(filt)
 
     def search(self, model, col, key, i):
         sort_col = self.store.get_sort_column_id()[0]
@@ -130,13 +130,37 @@ class semanagePage:
         dlg.destroy()
 
     def deleteDialog(self):
-        store, iter = self.view.get_selection().get_selected()
-        if self.verify(_("Are you sure you want to delete %s '%s'?" % (self.description, store.get_value(iter, 0))), _("Delete %s" % self.description)) == gtk.RESPONSE_YES:
+        store, it = self.view.get_selection().get_selected()
+        if (it is not None) and (self.verify(_("Are you sure you want to delete %s '%s'?" % (self.description, store.get_value(it, 0))), _("Delete %s" % self.description)) == gtk.RESPONSE_YES):
             self.delete()
 
     def use_menus(self):
         return True
 
+    def load(self, filt):
+        raise RuntimeError("load method not implemented in parent class");
+
+    def filter(self):
+        raise RuntimeError("filter method not implemented in parent class");
+
+    def store(self):
+        raise RuntimeError("store method not implemented in parent class");
+
+    def add(self):
+        raise RuntimeError("add method not implemented");
+
+    def modify(self):
+        raise RuntimeError("modify method not implemented");
+
+    def delete(self):
+        raise RuntimeError("delete method not implemented");
+
+    def dialogInit(self):
+        raise RuntimeError("dialogInit method not implemented");
+
+    def dialogClear(self):
+        raise RuntimeError("dialogClear method not implemented");
+
     def addDialog(self):
         self.dialogClear()
         self.dialog.set_title(_("Add %s" % self.description))
@@ -144,7 +168,7 @@ class semanagePage:
 
         while self.dialog.run() == gtk.RESPONSE_OK:
             try:
-                if self.add() == False:
+                if self.add() is False:
                     continue
                 break
             except ValueError as e:
@@ -157,7 +181,7 @@ class semanagePage:
         self.dialog.set_position(gtk.WIN_POS_MOUSE)
         while self.dialog.run() == gtk.RESPONSE_OK:
             try:
-                if self.modify() == False:
+                if self.modify() is False:
                     continue
                 break
             except ValueError as e:
diff --git policycoreutils-2.6/gui/statusPage.py policycoreutils-2.6/gui/statusPage.py
index 23d0d0f..2c06e6c 100644
--- policycoreutils-2.6/gui/statusPage.py
+++ policycoreutils-2.6/gui/statusPage.py
@@ -16,11 +16,9 @@
 ## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 ## Author: Dan Walsh
-import string
 import gtk
 import gtk.glade
 import os
-import gobject
 import sys
 import tempfile
 import selinux
@@ -141,21 +139,21 @@ class statusPage:
         return rc
 
     def typemenu_changed(self, menu):
-        type = self.get_type()
+        setype = self.get_type()
         enabled = self.enabledOptionMenu.get_active()
-        if self.initialtype != type:
+        if self.initialtype != setype:
             if self.verify(_("Changing the policy type will cause a relabel of the entire file system on the next boot. Relabeling takes a long time depending on the size of the file system.  Do you wish to continue?")) == gtk.RESPONSE_NO:
                 menu.set_active(self.typeHistory)
                 return None
 
             self.relabel_checkbutton.set_active(True)
 
-        self.write_selinux_config(modearray[enabled], type)
+        self.write_selinux_config(modearray[enabled], setype )
         self.typeHistory = menu.get_active()
 
     def enabled_changed(self, combo):
         enabled = combo.get_active()
-        type = self.get_type()
+        setype = self.get_type()
 
         if self.initEnabled != DISABLED and enabled == DISABLED:
             if self.verify(_("Changing to SELinux disabled requires a reboot.  It is not recommended.  If you later decide to turn SELinux back on, the system will be required to relabel.  If you just want to see if SELinux is causing a problem on your system, you can go to permissive mode which will only log errors and not enforce SELinux policy.  Permissive mode does not require a reboot    Do you wish to continue?")) == gtk.RESPONSE_NO:
@@ -168,10 +166,10 @@ class statusPage:
                 return None
             self.relabel_checkbutton.set_active(True)
 
-        self.write_selinux_config(modearray[enabled], type)
+        self.write_selinux_config(modearray[enabled], setype )
         self.enabled = enabled
 
-    def write_selinux_config(self, enforcing, type):
+    def write_selinux_config(self, enforcing, setype):
         path = selinux.selinux_path() + "config"
         backup_path = path + ".bck"
         fd = open(path)
@@ -183,7 +181,7 @@ class statusPage:
                 fd.write("SELINUX=%s\n" % enforcing)
                 continue
             if l.startswith("SELINUXTYPE="):
-                fd.write("SELINUXTYPE=%s\n" % type)
+                fd.write("SELINUXTYPE=%s\n" % setype)
                 continue
             fd.write(l)
         fd.close()
diff --git policycoreutils-2.6/gui/system-config-selinux.glade policycoreutils-2.6/gui/system-config-selinux.glade
index 05a697e..4547b3f 100644
--- policycoreutils-2.6/gui/system-config-selinux.glade
+++ policycoreutils-2.6/gui/system-config-selinux.glade
@@ -729,7 +729,7 @@ regular file
 directory
 character device
 block device
-socket
+socket file
 symbolic link
 named pipe
 </property>
diff --git policycoreutils-2.6/gui/usersPage.py policycoreutils-2.6/gui/usersPage.py
index 75b0547..590e111 100644
--- policycoreutils-2.6/gui/usersPage.py
+++ policycoreutils-2.6/gui/usersPage.py
@@ -16,10 +16,8 @@
 ## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 ## Author: Dan Walsh
-import string
 import gtk
 import gtk.glade
-import os
 import gobject
 import sys
 try:
@@ -79,8 +77,8 @@ class usersPage(semanagePage):
         self.mlsRangeEntry = xml.get_widget("mlsRangeEntry")
         self.selinuxRolesEntry = xml.get_widget("selinuxRolesEntry")
 
-    def load(self, filter=""):
-        self.filter = filter
+    def load(self, filt = ""):
+        self.filter=filt
         self.user = seobject.seluserRecords()
         dict = self.user.get_all()
         self.store.clear()
@@ -89,22 +87,18 @@ class usersPage(semanagePage):
             if not (self.match(k, filter) or self.match(dict[k][0], filter) or self.match(range, filter) or self.match(dict[k][3], filter)):
                 continue
 
-            iter = self.store.append()
-            self.store.set_value(iter, 0, k)
-            self.store.set_value(iter, 1, range)
-            self.store.set_value(iter, 2, dict[k][3])
-        self.view.get_selection().select_path((0,))
-
-    def delete(self):
-        if semanagePage.delete(self) == gtk.RESPONSE_NO:
-            return None
+            it = self.store.append()
+            self.store.set_value(it, 0, k)
+            self.store.set_value(it, 1, serange)
+            self.store.set_value(it, 2, udict[k][3])
+        self.view.get_selection().select_path ((0,))
 
     def dialogInit(self):
-        store, iter = self.view.get_selection().get_selected()
-        self.selinuxUserEntry.set_text(store.get_value(iter, 0))
+        store, it = self.view.get_selection().get_selected()
+        self.selinuxUserEntry.set_text(store.get_value(it, 0))
         self.selinuxUserEntry.set_sensitive(False)
-        self.mlsRangeEntry.set_text(store.get_value(iter, 1))
-        self.selinuxRolesEntry.set_text(store.get_value(iter, 2))
+        self.mlsRangeEntry.set_text(store.get_value(it, 1))
+        self.selinuxRolesEntry.set_text(store.get_value(it, 2))
 
     def dialogClear(self):
         self.selinuxUserEntry.set_text("")
@@ -114,7 +108,7 @@ class usersPage(semanagePage):
 
     def add(self):
         user = self.selinuxUserEntry.get_text()
-        range = self.mlsRangeEntry.get_text()
+        serange = self.mlsRangeEntry.get_text()
         roles = self.selinuxRolesEntry.get_text()
 
         self.wait()
@@ -123,14 +117,10 @@ class usersPage(semanagePage):
         if rc != 0:
             self.error(out)
             return False
-        iter = self.store.append()
-        self.store.set_value(iter, 0, user)
-        self.store.set_value(iter, 1, range)
-        self.store.set_value(iter, 2, roles)
 
     def modify(self):
         user = self.selinuxUserEntry.get_text()
-        range = self.mlsRangeEntry.get_text()
+        serange = self.mlsRangeEntry.get_text()
         roles = self.selinuxRolesEntry.get_text()
 
         self.wait()
@@ -140,12 +130,12 @@ class usersPage(semanagePage):
         if rc != 0:
             self.error(out)
             return False
-        self.load(self.filter)
+        return True
 
     def delete(self):
-        store, iter = self.view.get_selection().get_selected()
+        store, it = self.view.get_selection().get_selected()
         try:
-            user = store.get_value(iter, 0)
+            user=store.get_value(it, 0)
             if user == "root" or user == "user_u":
                 raise ValueError(_("SELinux user '%s' is required") % user)
 
diff --git policycoreutils-2.6/sandbox/sandboxX.sh policycoreutils-2.6/sandbox/sandboxX.sh
index eaa500d..4774528 100644
--- policycoreutils-2.6/sandbox/sandboxX.sh
+++ policycoreutils-2.6/sandbox/sandboxX.sh
@@ -20,7 +20,7 @@ cat > ~/.config/openbox/rc.xml << EOF
 </openbox_config>
 EOF
 
-(/usr/bin/Xephyr -resizeable -title "$TITLE" -terminate -screen $SCREENSIZE -dpi $DPI -nolisten tcp -displayfd 5 5>&1 2>/dev/null) | while read D; do
+(/usr/bin/Xephyr -resizeable -title "$TITLE" -terminate -reset -screen $SCREENSIZE -dpi $DPI -nolisten tcp -displayfd 5 5>&1 2>/dev/null) | while read D; do
     export DISPLAY=:$D
     cat > ~/seremote << __EOF
 #!/bin/sh
diff --git policycoreutils-2.6/scripts/fixfiles policycoreutils-2.6/scripts/fixfiles
index fa43a53..5906a47 100755
--- policycoreutils-2.6/scripts/fixfiles
+++ policycoreutils-2.6/scripts/fixfiles
@@ -116,6 +116,7 @@ exclude_dirs() {
 fullFlag=0
 BOOTTIME=""
 VERBOSE="-p"
+[ -t 1 ] || VERBOSE=""
 FORCEFLAG=""
 DIRS=""
 RPMILES=""
@@ -137,6 +138,9 @@ else
     FC=/etc/security/selinux/file_contexts
 fi
 
+FC_SUB_DIST=${FC}.subs_dist
+FC_SUB=${FC}.subs
+FC_HOMEDIRS=${FC}.homedirs
 #
 # Log to either syslog or a LOGFILE
 #
@@ -244,6 +248,10 @@ then
 		logit "skipping the directory ${p}"
 	done
 FC=$TEMPFCFILE
+/bin/cp -p ${FC_SUB_DIST} ${TEMPFCFILE}.subs_dist &>/dev/null || exit
+/bin/cp -p ${FC_SUB} ${TEMPFCFILE}.subs &>/dev/null || exit
+/bin/cp -p ${FC_HOMEDIRS} ${TEMPFCFILE}.homedirs &>/dev/null || exit
+
 fi
 if [ ! -z "$RPMFILES" ]; then
     for i in `echo "$RPMFILES" | sed 's/,/ /g'`; do
@@ -265,7 +273,7 @@ if [ ${OPTION} != "Relabel" ]; then
     return
 fi
 echo "Cleaning up labels on /tmp"
-rm -rf /tmp/gconfd-* /tmp/pulse-* /tmp/orbit-* $TEMPFCFILE
+rm -rf /tmp/gconfd-* /tmp/pulse-* /tmp/orbit-* $TEMPFCFILE ${TEMPFCFILE}.subs_dist ${TEMPFCFILE}.subs ${TEMPFCFILE}.homedirs
 
 UNDEFINED=`get_undefined_type` || exit $?
 UNLABELED=`get_unlabeled_type` || exit $?
diff --git policycoreutils-2.6/semanage/semanage.8 policycoreutils-2.6/semanage/semanage.8
index ac39862..75b782f 100644
--- policycoreutils-2.6/semanage/semanage.8
+++ policycoreutils-2.6/semanage/semanage.8
@@ -51,8 +51,7 @@ to SELinux user identities (which controls the initial security context
 assigned to Linux users when they login and bounds their authorized role set)
 as well as security context mappings for various kinds of objects, such
 as network ports, interfaces, and nodes (hosts) as well as the file
-context mapping. See the EXAMPLES section below for some examples
-of common usage.  Note that the semanage login command deals with the
+context mapping. Note that the semanage login command deals with the
 mapping from Linux usernames (logins) to SELinux user identities,
 while the semanage user command deals with the mapping from SELinux
 user identities to authorized role sets.  In most cases, only the
diff --git policycoreutils-2.6/semanage/seobject.py policycoreutils-2.6/semanage/seobject.py
index bb049c0..5f5fdec 100644
--- policycoreutils-2.6/semanage/seobject.py
+++ policycoreutils-2.6/semanage/seobject.py
@@ -1953,10 +1953,12 @@ class fcontextRecords(semanageRecords):
             if not exists:
                 raise ValueError(_("File context for %s is not defined") % target)
 
-        (rc, fcontext) = semanage_fcontext_query_local(self.sh, k)
-        if rc < 0:
-            (rc, fcontext) = semanage_fcontext_query(self.sh, k)
-            if rc < 0:
+        try:
+            (rc, fcontext) = semanage_fcontext_query_local(self.sh, k)
+        except OSError:
+            try:
+                (rc, fcontext) = semanage_fcontext_query(self.sh, k)
+            except OSError:
                 raise ValueError(_("Could not query file context for %s") % target)
 
         if setype != "<<none>>":
diff --git policycoreutils-2.6/semodule_package/semodule_package.c policycoreutils-2.6/semodule_package/semodule_package.c
index d2a5fd0..e472054 100644
--- policycoreutils-2.6/semodule_package/semodule_package.c
+++ policycoreutils-2.6/semodule_package/semodule_package.c
@@ -72,6 +72,10 @@ static int file_to_data(const char *path, char **data, size_t * len)
 			path, strerror(errno));
 		goto err;
 	}
+	if (!sb.st_size) {
+		*len = 0;
+		return 0;
+	}
 
 	*data = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
 	if (*data == MAP_FAILED) {
diff --git policycoreutils-2.6/sepolicy/org.selinux.conf policycoreutils-2.6/sepolicy/org.selinux.conf
index a350978..1ae079d 100644
--- policycoreutils-2.6/sepolicy/org.selinux.conf
+++ policycoreutils-2.6/sepolicy/org.selinux.conf
@@ -12,12 +12,8 @@
 
   <!-- Allow anyone to invoke methods on the interfaces,
        authorization is performed by PolicyKit -->
-  <policy at_console="true">
-    <allow send_destination="org.selinux"/>
-  </policy>
   <policy context="default">
-    <allow send_destination="org.selinux"
-	   send_interface="org.freedesktop.DBus.Introspectable"/>
+    <allow send_destination="org.selinux"/>
   </policy>
 
 </busconfig>
diff --git policycoreutils-2.6/sepolicy/org.selinux.policy policycoreutils-2.6/sepolicy/org.selinux.policy
index 0126610..9772127 100644
--- policycoreutils-2.6/sepolicy/org.selinux.policy
+++ policycoreutils-2.6/sepolicy/org.selinux.policy
@@ -70,9 +70,9 @@
 	  <allow_active>auth_admin_keep</allow_active>
         </defaults>
     </action>
-    <action id="org.selinux.change_policy_type">
-        <description>SELinux write access</description>
-        <message>System policy prevents change_policy_type access to SELinux</message>
+    <action id="org.selinux.change_default_mode">
+        <description>Change SELinux default enforcing mode</description>
+        <message>System policy prevents change_default_policy access to SELinux</message>
         <defaults>
           <allow_any>no</allow_any>
           <allow_inactive>no</allow_inactive>
diff --git policycoreutils-2.6/sepolicy/selinux_client.py policycoreutils-2.6/sepolicy/selinux_client.py
index 7f4a91c..238048b 100644
--- policycoreutils-2.6/sepolicy/selinux_client.py
+++ policycoreutils-2.6/sepolicy/selinux_client.py
@@ -35,10 +35,10 @@ def convert_customization(buf):
             cust_dict["module"][rec[-1]] = {"enabled": rec[2] != "-d"}
 
     return cust_dict
-if __name__ == "__main__":
+if __name__ == "__main__": 
     try:
         dbus_proxy = SELinuxDBus()
         resp = dbus_proxy.customized()
-        print convert_customization(resp)
-    except dbus.DBusException, e:
-        print e
+        print(convert_customization(resp))
+    except dbus.DBusException as e:
+        print(e)
diff --git policycoreutils-2.6/sepolicy/selinux_server.py policycoreutils-2.6/sepolicy/selinux_server.py
index cdf4d16..a39a923 100644
--- policycoreutils-2.6/sepolicy/selinux_server.py
+++ policycoreutils-2.6/sepolicy/selinux_server.py
@@ -3,7 +3,7 @@
 import dbus
 import dbus.service
 import dbus.mainloop.glib
-import gobject
+from gi.repository import GObject, GLib
 import slip.dbus.service
 from slip.dbus import polkit
 import os
@@ -20,45 +20,45 @@ class selinux_server(slip.dbus.service.Object):
     #
     # The semanage method runs a transaction on a series of semanage commands,
     # these commnds can take the output of customized
-    #
+    # 
     @slip.dbus.polkit.require_auth("org.selinux.semanage")
     @dbus.service.method("org.selinux", in_signature='s')
     def semanage(self, buf):
-        p = Popen(["/usr/sbin/semanage", "import"], stdout=PIPE, stderr=PIPE, stdin=PIPE)
+        p = Popen(["/usr/sbin/semanage", "import"],stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True)
         p.stdin.write(buf)
         output = p.communicate()
         if p.returncode and p.returncode != 0:
             raise dbus.exceptions.DBusException(output[1])
-
+        
     #
     # The customized method will return all of the custommizations for policy
-    # on the server.  This output can be used with the semanage method on
+    # on the server.  This output can be used with the semanage method on 
     # another server to make the two systems have duplicate policy.
     #
     @slip.dbus.polkit.require_auth("org.selinux.customized")
     @dbus.service.method("org.selinux", in_signature='', out_signature='s')
     def customized(self):
-        p = Popen(["/usr/sbin/semanage", "export"], stdout=PIPE, stderr=PIPE)
+        p = Popen(["/usr/sbin/semanage", "export"], stdout=PIPE, stderr=PIPE, universal_newlines=True)
         buf = p.stdout.read()
         output = p.communicate()
         if p.returncode and p.returncode != 0:
             raise OSError("Failed to read SELinux configuration: %s", output)
         return buf
-
+        
     #
-    # The semodule_list method will return the output of semodule -l, using the customized polkit,
+    # The semodule_list method will return the output of semodule --list=full, using the customized polkit,
     # since this is a readonly behaviour
     #
     @slip.dbus.polkit.require_auth("org.selinux.semodule_list")
     @dbus.service.method("org.selinux", in_signature='', out_signature='s')
     def semodule_list(self):
-        p = Popen(["/usr/sbin/semodule", "-l"], stdout=PIPE, stderr=PIPE)
+        p = Popen(["/usr/sbin/semodule", "--list=full"], stdout=PIPE, stderr=PIPE, universal_newlines=True)
         buf = p.stdout.read()
         output = p.communicate()
         if p.returncode and p.returncode != 0:
             raise OSError("Failed to list SELinux modules: %s", output)
         return buf
-
+        
     #
     # The restorecon method modifies any file path to the default system label
     #
@@ -88,7 +88,7 @@ class selinux_server(slip.dbus.service.Object):
             os.unlink("/.autorelabel")
 
     def write_selinux_config(self, enforcing=None, policy=None):
-        path = selinux.selinux_path() + "config"
+        path = selinux.selinux_path() + "config" 
         backup_path = path + ".bck"
         fd = open(path)
         lines = fd.readlines()
@@ -106,7 +106,7 @@ class selinux_server(slip.dbus.service.Object):
         os.rename(backup_path, path)
 
     #
-    # The change_default_enforcement modifies the current enforcement mode
+    # The change_default_enforcement modifies the current enforcement mode 
     #
     @slip.dbus.polkit.require_auth("org.selinux.change_default_mode")
     @dbus.service.method("org.selinux", in_signature='s')
@@ -126,9 +126,9 @@ class selinux_server(slip.dbus.service.Object):
         if os.path.isdir(path):
             return self.write_selinux_config(policy=value)
         raise ValueError("%s does not exist" % path)
-
+        
 if __name__ == "__main__":
-    mainloop = gobject.MainLoop()
+    mainloop = GLib.MainLoop()
     dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
     system_bus = dbus.SystemBus()
     name = dbus.service.BusName("org.selinux", system_bus)
diff --git policycoreutils-2.6/sepolicy/sepolicy-bash-completion.sh policycoreutils-2.6/sepolicy/sepolicy-bash-completion.sh
index 779fd75..29ccbdf 100644
--- policycoreutils-2.6/sepolicy/sepolicy-bash-completion.sh
+++ policycoreutils-2.6/sepolicy/sepolicy-bash-completion.sh
@@ -16,9 +16,9 @@
 # along with systemd; If not, see <http://www.gnu.org/licenses/>.
 
 __contains_word () {
-        local word=$1; shift
-        for w in $*; do [[ $w = $word ]] && return 0; done
-        return 1
+    local word=$1; shift
+    for w in $*; do [[ $w = $word ]] && return 0; done
+    return 1
 }
 
 __get_all_paths () {
@@ -28,37 +28,40 @@ __get_all_ftypes () {
     echo '-- -d -c -b -s -l -p'
 }
 __get_all_networks () {
-    seinfo -u 2> /dev/null | tail -n +3
+    /usr/bin/seinfo -u 2> /dev/null | tail -n +3
 }
 __get_all_booleans () {
-    getsebool -a 2> /dev/null
+    /usr/bin/getsebool -a 2> /dev/null
 }
 __get_all_types () {
-    seinfo -t 2> /dev/null | tail -n +3
+    /usr/bin/seinfo -t 2> /dev/null | tail -n +3
+}
+__get_all_roles () {
+    /usr/bin/seinfo -r 2> /dev/null | tail -n +3
 }
 __get_all_admin_interaces () {
-    awk '/InterfaceVector.*_admin /{ print $2 }' /var/lib/sepolgen/interface_info | awk -F '_admin' '{ print $1 }'
+    /usr/bin/awk '/InterfaceVector.*_admin /{ print $2 }' /var/lib/sepolgen/interface_info | /usr/bin/awk -F '_admin' '{ print $1 }'
 }
 __get_all_user_role_interaces () {
-    awk '/InterfaceVector.*_role /{ print $2 }' /var/lib/sepolgen/interface_info | awk -F '_role' '{ print $1 }'
+    /usr/bin/awk '/InterfaceVector.*_role /{ print $2 }' /var/lib/sepolgen/interface_info | /usr/bin/awk -F '_role' '{ print $1 }'
 }
 __get_all_user_domains () {
-    seinfo -auserdomain -x 2> /dev/null | tail -n +2
+    /usr/bin/seinfo -auserdomain -x 2> /dev/null | tail -n +2
 }
 __get_all_users () {
-    seinfo -u 2> /dev/null | tail -n +2
+    /usr/bin/seinfo -u 2> /dev/null | tail -n +2
 }
 __get_all_classes () {
-    seinfo -c 2> /dev/null | tail -n +2
+    /usr/bin/seinfo -c 2> /dev/null | tail -n +2
 }
 __get_all_port_types () {
-    seinfo -aport_type -x 2> /dev/null | tail -n +2
+    /usr/bin/seinfo -aport_type -x 2> /dev/null | tail -n +2
 }
 __get_all_domain_types () {
-    seinfo -adomain -x 2> /dev/null | tail -n +2
+    /usr/bin/seinfo -adomain -x 2> /dev/null | tail -n +2
 }
 __get_all_domains () {
-    seinfo -adomain -x 2>/dev/null | sed 's/_t$//g'
+    /usr/bin/seinfo -adomain -x 2>/dev/null | sed 's/_t$//g'
 }
 _sepolicy () {
         local command=${COMP_WORDS[1]}
diff --git policycoreutils-2.6/sepolicy/sepolicy-generate.8 policycoreutils-2.6/sepolicy/sepolicy-generate.8
index 2e67456..0c5f998 100644
--- policycoreutils-2.6/sepolicy/sepolicy-generate.8
+++ policycoreutils-2.6/sepolicy/sepolicy-generate.8
@@ -13,7 +13,7 @@ Common options
 Confined Applications
 
 .br
-.B sepolicy generate \-\-application [\-n NAME] command [\-w WRITE_PATH ]
+.B sepolicy generate \-\-application [\-n NAME] [\-u USER ]command [\-w WRITE_PATH ]
 .br
 .B sepolicy generate \-\-cgi [\-n NAME] command [\-w WRITE_PATH ]
 .br
diff --git policycoreutils-2.6/sepolicy/sepolicy.py policycoreutils-2.6/sepolicy/sepolicy.py
index 3e502a7..a4380a7 100755
--- policycoreutils-2.6/sepolicy/sepolicy.py
+++ policycoreutils-2.6/sepolicy/sepolicy.py
@@ -26,6 +26,7 @@ import sys
 import selinux
 import sepolicy
 from sepolicy import get_os_version, get_conditionals, get_conditionals_format_text
+from sepolgen import util
 import argparse
 PROGNAME = "policycoreutils"
 try:
@@ -125,7 +126,7 @@ class CheckClass(argparse.Action):
     def __call__(self, parser, namespace, values, option_string=None):
         global all_classes
         if not all_classes:
-            all_classes = map(lambda x: x['name'], sepolicy.info(sepolicy.TCLASS))
+            all_classes = [x['name'] for x in sepolicy.info(sepolicy.TCLASS)]
         if values not in all_classes:
             raise ValueError("%s must be an SELinux class:\nValid classes: %s" % (values, ", ".join(all_classes)))
 
@@ -176,7 +177,6 @@ class CheckPortType(argparse.Action):
 class LoadPolicy(argparse.Action):
 
     def __call__(self, parser, namespace, values, option_string=None):
-        import sepolicy
         sepolicy.policy(values)
         setattr(namespace, self.dest, values)
 
@@ -185,9 +185,8 @@ class CheckPolicyType(argparse.Action):
 
     def __call__(self, parser, namespace, values, option_string=None):
         from sepolicy.generate import get_poltype_desc, poltype
-        if values not in poltype.keys():
+        if values not in list(poltype.keys()):
             raise ValueError("%s invalid SELinux policy type\n%s" % (values, get_poltype_desc()))
-            newval.append(v)
         setattr(namespace, self.dest, values)
 
 
@@ -223,7 +222,7 @@ class InterfaceInfo(argparse.Action):
         from sepolicy.interface import get_interface_dict
         interface_dict = get_interface_dict()
         for v in values:
-            if v not in interface_dict.keys():
+            if v not in list(interface_dict.keys()):
                 raise ValueError(_("Interface %s does not exist.") % v)
 
         setattr(namespace, self.dest, values)
@@ -231,7 +230,7 @@ class InterfaceInfo(argparse.Action):
 
 def generate_custom_usage(usage_text, usage_dict):
     sorted_keys = []
-    for i in usage_dict.keys():
+    for i in list(usage_dict.keys()):
         sorted_keys.append(i)
     sorted_keys.sort()
     for k in sorted_keys:
@@ -253,7 +252,7 @@ def numcmp(val1, val2):
         if v1 < v2:
             return -1
     except:
-        return cmp(val1, val2)
+        return (val1 > val2) - (val1 < val2)
 
 
 def _print_net(src, protocol, perm):
@@ -262,7 +261,7 @@ def _print_net(src, protocol, perm):
     if len(portdict) > 0:
         bold_start = "\033[1m"
         bold_end = "\033[0;0m"
-        print "\n" + bold_start + "%s: %s %s" % (src, protocol, perm) + bold_end
+        print("\n" + bold_start + "%s: %s %s" % (src, protocol, perm) + bold_end)
         port_strings = []
         boolean_text = ""
         for p in portdict:
@@ -273,9 +272,9 @@ def _print_net(src, protocol, perm):
                     port_strings.append("%s (%s) %s" % (", ".join(recs), t, boolean_text))
                 else:
                     port_strings.append("%s (%s)" % (", ".join(recs), t))
-        port_strings.sort(numcmp)
+        port_strings.sort(key=util.cmp_to_key(numcmp))
         for p in port_strings:
-            print "\t" + p
+            print("\t" + p)
 
 
 def network(args):
@@ -286,29 +285,29 @@ def network(args):
             if i[0] not in all_ports:
                 all_ports.append(i[0])
         all_ports.sort()
-        print "\n".join(all_ports)
+        print("\n".join(all_ports))
 
     for port in args.port:
         found = False
         for i in portrecsbynum:
             if i[0] <= port and port <= i[1]:
                 if i[0] == i[1]:
-                    range = i[0]
+                    RANGE = i[0]
                 else:
-                    range = "%s-%s" % (i[0], i[1])
+                    RANGE = "%s-%s" % (i[0], i[1])
                 found = True
-                print "%d: %s %s %s" % (port, i[2], portrecsbynum[i][0], range)
+                print("%d: %s %s %s" % (port, i[2], portrecsbynum[i][0], RANGE))
         if not found:
             if port < 500:
-                print "Undefined reserved port type"
+                print("Undefined reserved port type")
             else:
-                print "Undefined port type"
+                print("Undefined port type")
 
     for t in args.type:
         if (t, 'tcp') in portrecs.keys():
-            print "%s: tcp: %s" % (t, ",".join(portrecs[t, 'tcp']))
+            print("%s: tcp: %s" % (t, ",".join(portrecs[t, 'tcp'])))
         if (t, 'udp') in portrecs.keys():
-            print "%s: udp: %s" % (t, ",".join(portrecs[t, 'udp']))
+            print( "%s: udp: %s" % (t, ",".join(portrecs[t, 'udp'])))
 
     for a in args.applications:
         d = sepolicy.get_init_transtype(a)
@@ -357,7 +356,7 @@ def manpage(args):
 
     for domain in test_domains:
         m = ManPage(domain, path, args.root, args.source_files, args.web)
-        print m.get_man_page_path()
+        print(m.get_man_page_path())
 
     if args.web:
         HTMLManPages(manpage_roles, manpage_domains, path, args.os)
@@ -418,7 +417,7 @@ def communicate(args):
     out = list(set(writable) & set(readable))
 
     for t in out:
-        print t
+        print(t)
 
 
 def gen_communicate_args(parser):
@@ -442,10 +441,12 @@ def booleans(args):
     from sepolicy import boolean_desc
     if args.all:
         rc, args.booleans = selinux.security_get_boolean_names()
+        if util.PY3:
+            args.booleans = [util.decode_input(x) for x in args.booleans]
     args.booleans.sort()
 
     for b in args.booleans:
-        print "%s=_(\"%s\")" % (b, boolean_desc(b))
+        print("%s=_(\"%s\")" % (b, boolean_desc(b)))
 
 
 def gen_booleans_args(parser):
@@ -484,20 +485,20 @@ def print_interfaces(interfaces, args, append=""):
     for i in interfaces:
         if args.verbose:
             try:
-                print get_interface_format_text(i + append)
+                print(get_interface_format_text(i + append))
             except KeyError:
-                print i
+                print(i)
         if args.compile:
             try:
                 interface_compile_test(i)
             except KeyError:
-                print i
+                print(i)
         else:
-            print i
+            print(i)
 
 
 def interface(args):
-    from sepolicy.interface import get_admin, get_user, get_interface_dict, get_all_interfaces
+    from sepolicy.interface import get_admin, get_user, get_all_interfaces
     if args.list_admin:
         print_interfaces(get_admin(args.file), args, "_admin")
     if args.list_user:
@@ -509,7 +510,7 @@ def interface(args):
 
 
 def generate(args):
-    from sepolicy.generate import policy, AUSER, RUSER, EUSER, USERS, SANDBOX, APPLICATIONS, NEWTYPE
+    from sepolicy.generate import policy, AUSER, RUSER, EUSER, APPLICATIONS, NEWTYPE
     cmd = None
 # numbers present POLTYPE defined in sepolicy.generate
     conflict_args = {'TYPES': (NEWTYPE,), 'DOMAIN': (EUSER,), 'ADMIN_DOMAIN': (AUSER, RUSER, EUSER,)}
@@ -520,7 +521,7 @@ def generate(args):
         for k in usage_dict:
             error_text += "%s" % (k)
         print(generate_usage)
-        print(_("sepolicy generate: error: one of the arguments %s is required") % error_text)
+        print((_("sepolicy generate: error: one of the arguments %s is required") % error_text))
         sys.exit(1)
 
     if args.policytype in APPLICATIONS:
@@ -565,7 +566,7 @@ def generate(args):
     if args.policytype in APPLICATIONS:
         mypolicy.gen_writeable()
         mypolicy.gen_symbols()
-    print mypolicy.generate(args.path)
+    print(mypolicy.generate(args.path))
 
 
 def gen_interface_args(parser):
@@ -595,7 +596,7 @@ def gen_interface_args(parser):
 
 
 def gen_generate_args(parser):
-    from sepolicy.generate import DAEMON, get_poltype_desc, poltype, DAEMON, DBUS, INETD, CGI, SANDBOX, USER, EUSER, TUSER, XUSER, LUSER, AUSER, RUSER, NEWTYPE
+    from sepolicy.generate import DAEMON, poltype, DAEMON, DBUS, INETD, CGI, SANDBOX, USER, EUSER, TUSER, XUSER, LUSER, AUSER, RUSER, NEWTYPE
 
     generate_usage = generate_custom_usage(usage, usage_dict)
 
@@ -643,8 +644,8 @@ def gen_generate_args(parser):
                           action="store_const", default=DAEMON,
                           help=_("Generate '%s' policy") % poltype[DAEMON])
 
-    type = pol.add_argument_group("Policy types which do not require a command")
-    group = type.add_mutually_exclusive_group(required=False)
+    TYPE = pol.add_argument_group("Policy types which do not require a command")
+    group = TYPE.add_mutually_exclusive_group(required=False)
     group.add_argument("--admin_user", dest="policytype", const=AUSER,
                        action="store_const",
                        help=_("Generate '%s' policy") % poltype[AUSER])
@@ -698,12 +699,12 @@ if __name__ == '__main__':
         args = parser.parse_args(args=parser_args)
         args.func(args)
         sys.exit(0)
-    except ValueError, e:
+    except ValueError as e:
         sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
         sys.exit(1)
-    except IOError, e:
+    except IOError as e:
         sys.stderr.write("%s: %s\n" % (e.__class__.__name__, str(e)))
         sys.exit(1)
     except KeyboardInterrupt:
-        print "Out"
+        print("Out")
         sys.exit(0)
diff --git policycoreutils-2.6/sepolicy/sepolicy/__init__.py policycoreutils-2.6/sepolicy/sepolicy/__init__.py
index 8fbd5b4..074d20e 100644
--- policycoreutils-2.6/sepolicy/sepolicy/__init__.py
+++ policycoreutils-2.6/sepolicy/sepolicy/__init__.py
@@ -383,7 +383,12 @@ def get_conditionals(src, dest, tclass, perm):
 
 
 def get_conditionals_format_text(cond):
-    enabled = len(filter(lambda x: x['boolean'][0][1], cond)) > 0
+
+    enabled = False
+    for x in cond:
+        if x['boolean'][0][1]:
+            enabled = True
+            break
     return _("-- Allowed %s [ %s ]") % (enabled, " || ".join(set(map(lambda x: "%s=%d" % (x['boolean'][0][0], x['boolean'][0][1]), cond))))
 
 
@@ -465,7 +470,7 @@ def find_file(reg):
 
     try:
         pat = re.compile(r"%s$" % reg)
-        return filter(pat.match, map(lambda x: path + x, os.listdir(path)))
+        return [x for x in map(lambda x: path + x, os.listdir(path)) if pat.match(x)]
     except:
         return []
 
@@ -589,7 +594,7 @@ def get_fcdict(fc_path=selinux.selinux_file_context_path()):
 
 def get_transitions_into(setype):
     try:
-        return filter(lambda x: x["transtype"] == setype, search([TRANSITION], {'class': 'process'}))
+        return [x for x in search([TRANSITION], {'class': 'process'}) if x["transtype"] == setype]
     except (TypeError, AttributeError):
         pass
     return None
@@ -605,7 +610,7 @@ def get_transitions(setype):
 
 def get_file_transitions(setype):
     try:
-        return filter(lambda x: x['class'] != "process", search([TRANSITION], {'source': setype}))
+        return [x for x in search([TRANSITION], {'source': setype}) if x['class'] != "process"]
     except (TypeError, AttributeError):
         pass
     return None
@@ -663,6 +668,23 @@ def get_init_entrypoint(transtype):
 
     return entrypoints
 
+def get_init_entrypoints_str():
+    q = setools.TERuleQuery(_pol,
+                            ruletype=["type_transition"],
+                            source="init_t",
+                            tclass=["process"])
+    entrypoints = {}
+    for i in q.results():
+        try:
+            transtype = str(i.default)
+            if transtype in entrypoints:
+                entrypoints[transtype].append(str(i.target))
+            else:
+                entrypoints[transtype] = [str(i.target)]
+        except AttributeError:
+            continue
+
+    return entrypoints
 
 def get_init_entrypoint_target(entrypoint):
     try:
@@ -695,7 +717,7 @@ def get_methods():
     # List of per_role_template interfaces
         ifs = interfaces.InterfaceSet()
         ifs.from_file(fd)
-        methods = ifs.interfaces.keys()
+        methods = list(ifs.interfaces.keys())
         fd.close()
     except:
         sys.stderr.write("could not open interface info [%s]\n" % fn)
@@ -752,7 +774,10 @@ def get_all_entrypoint_domains():
 
 
 def gen_interfaces():
-    import commands
+    try:
+        from commands import getstatusoutput
+    except ImportError:
+        from subprocess import getstatusoutput
     ifile = defaults.interface_info()
     headers = defaults.headers()
     try:
@@ -763,7 +788,7 @@ def gen_interfaces():
 
     if os.getuid() != 0:
         raise ValueError(_("You must regenerate interface info by running /usr/bin/sepolgen-ifgen"))
-    print(commands.getstatusoutput("/usr/bin/sepolgen-ifgen")[1])
+    print(getstatusoutput("/usr/bin/sepolgen-ifgen")[1])
 
 
 def gen_port_dict():
@@ -1085,8 +1110,11 @@ def get_os_version():
     os_version = ""
     pkg_name = "selinux-policy"
     try:
-        import commands
-        rc, output = commands.getstatusoutput("rpm -q '%s'" % pkg_name)
+        try:
+            from commands import getstatusoutput
+        except ImportError:
+            from subprocess import getstatusoutput
+        rc, output = getstatusoutput("rpm -q '%s'" % pkg_name)
         if rc == 0:
             os_version = output.split(".")[-2]
     except:
diff --git policycoreutils-2.6/sepolicy/sepolicy/booleans.py policycoreutils-2.6/sepolicy/sepolicy/booleans.py
index cf5f1ff..83ec592 100644
--- policycoreutils-2.6/sepolicy/sepolicy/booleans.py
+++ policycoreutils-2.6/sepolicy/sepolicy/booleans.py
@@ -36,6 +36,6 @@ def get_types(src, tclass, perm):
         raise TypeError("The %s type is not allowed to %s any types" % (src, ",".join(perm)))
 
     tlist = []
-    for l in map(lambda y: y[sepolicy.TARGET], filter(lambda x: set(perm).issubset(x[sepolicy.PERMS]), allows)):
+    for l in [y[sepolicy.TARGET] for y in [x for x in allows if set(perm).issubset(x[sepolicy.PERMS])]]:
         tlist = tlist + expand_attribute(l)
     return tlist
diff --git policycoreutils-2.6/sepolicy/sepolicy/communicate.py policycoreutils-2.6/sepolicy/sepolicy/communicate.py
index b96c4b9..bd733a2 100755
--- policycoreutils-2.6/sepolicy/sepolicy/communicate.py
+++ policycoreutils-2.6/sepolicy/sepolicy/communicate.py
@@ -34,8 +34,8 @@ def usage(parser, msg):
 
 def expand_attribute(attribute):
     try:
-        return sepolicy.info(sepolicy.ATTRIBUTE, attribute)[0]["types"]
-    except RuntimeError:
+        return list(next(sepolicy.info(sepolicy.ATTRIBUTE, attribute))["types"])
+    except StopIteration:
         return [attribute]
 
 
@@ -45,6 +45,6 @@ def get_types(src, tclass, perm):
         raise ValueError("The %s type is not allowed to %s any types" % (src, ",".join(perm)))
 
     tlist = []
-    for l in map(lambda y: y[sepolicy.TARGET], filter(lambda x: set(perm).issubset(x[sepolicy.PERMS]), allows)):
+    for l in [y[sepolicy.TARGET] for y in [x for x in allows if set(perm).issubset(x[sepolicy.PERMS])]]:
         tlist = tlist + expand_attribute(l)
     return tlist
diff --git policycoreutils-2.6/sepolicy/sepolicy/generate.py policycoreutils-2.6/sepolicy/sepolicy/generate.py
index 65b33b6..17718f5 100644
--- policycoreutils-2.6/sepolicy/sepolicy/generate.py
+++ policycoreutils-2.6/sepolicy/sepolicy/generate.py
@@ -31,23 +31,24 @@ import time
 import types
 import platform
 
-from templates import executable
-from templates import boolean
-from templates import etc_rw
-from templates import unit_file
-from templates import var_cache
-from templates import var_spool
-from templates import var_lib
-from templates import var_log
-from templates import var_run
-from templates import tmp
-from templates import rw
-from templates import network
-from templates import script
-from templates import spec
-from templates import user
+from .templates import executable
+from .templates import boolean
+from .templates import etc_rw
+from .templates import unit_file
+from .templates import var_cache
+from .templates import var_spool
+from .templates import var_lib
+from .templates import var_log
+from .templates import var_run
+from .templates import tmp
+from .templates import rw
+from .templates import network
+from .templates import script
+from .templates import spec
+from .templates import user
 import sepolgen.interfaces as interfaces
 import sepolgen.defaults as defaults
+from sepolgen import util
 
 ##
 ## I18N
@@ -76,6 +77,11 @@ def get_rpm_nvr_from_header(hdr):
     name = hdr['name']
     version = hdr['version']
     release = hdr['release']
+    if util.PY3:
+        name = util.decode_input(name)
+        version = util.decode_input(version)
+        release = util.decode_input(release)
+
     release_version = version + "-" + release.split(".")[0]
     os_version = release.split(".")[1]
 
@@ -92,7 +98,7 @@ def get_rpm_nvr_list(package):
             nvr = get_rpm_nvr_from_header(h)
             break
     except:
-        print("Failed to retrieve rpm info for %s") % package
+        print(("Failed to retrieve rpm info for %s") % package)
         nvr = None
 
     return nvr
@@ -110,7 +116,7 @@ def get_all_ports():
 
 
 def get_all_users():
-    users = map(lambda x: x['name'], sepolicy.info(sepolicy.USER))
+    users = [x['name'] for x in sepolicy.info(sepolicy.USER)]
     users.remove("system_u")
     users.remove("root")
     users.sort()
@@ -154,7 +160,7 @@ poltype[NEWTYPE] = _("Module information for a new type")
 
 
 def get_poltype_desc():
-    keys = poltype.keys()
+    keys = list(poltype.keys())
     keys.sort()
     msg = _("Valid Types:\n")
     for k in keys:
@@ -168,7 +174,7 @@ USERS = [XUSER, TUSER, LUSER, AUSER, RUSER]
 def verify_ports(ports):
     if ports == "":
         return []
-    max_port = 2 ** 16
+    max_port = 2**16
     try:
         temp = []
         for a in ports.split(","):
@@ -429,7 +435,7 @@ class policy:
         return self.use_tcp() or self.use_udp()
 
     def find_port(self, port, protocol="tcp"):
-        for begin, end, p in self.ports.keys():
+        for begin, end, p in list(self.ports.keys()):
             if port >= begin and port <= end and protocol == p:
                 return self.ports[begin, end, protocol]
         return None
@@ -855,7 +861,7 @@ allow %s_t %s_t:%s_socket name_%s;
             role = d.split("_t")[0] + "_r"
             if role in self.all_roles:
                 newte += """
-	role %s;""" % role
+        role %s;""" % role
         newte += """
 ')
 """
@@ -1093,7 +1099,7 @@ allow %s_t %s_t:%s_socket name_%s;
     def generate_fc(self):
         newfc = ""
         fclist = []
-        for i in self.files.keys():
+        for i in list(self.files.keys()):
             if os.path.exists(i) and stat.S_ISSOCK(os.stat(i)[stat.ST_MODE]):
                 t1 = re.sub("TEMPLATETYPE", self.name, self.files[i][2].fc_sock_file)
             else:
@@ -1101,7 +1107,7 @@ allow %s_t %s_t:%s_socket name_%s;
             t2 = re.sub("FILENAME", i, t1)
             fclist.append(re.sub("FILETYPE", self.files[i][0], t2))
 
-        for i in self.dirs.keys():
+        for i in list(self.dirs.keys()):
             t1 = re.sub("TEMPLATETYPE", self.name, self.dirs[i][2].fc_dir)
             t2 = re.sub("FILENAME", i, t1)
             fclist.append(re.sub("FILETYPE", self.dirs[i][0], t2))
@@ -1164,10 +1170,10 @@ allow %s_t %s_t:%s_socket name_%s;
         if self.initscript != "":
             newsh += re.sub("FILENAME", self.initscript, script.restorecon)
 
-        for i in self.files.keys():
+        for i in list(self.files.keys()):
             newsh += re.sub("FILENAME", i, script.restorecon)
 
-        for i in self.dirs.keys():
+        for i in list(self.dirs.keys()):
             newsh += re.sub("FILENAME", i, script.restorecon)
 
         for i in self.in_tcp[PORTS] + self.out_tcp[PORTS]:
@@ -1181,8 +1187,7 @@ allow %s_t %s_t:%s_socket name_%s;
                 newsh += re.sub("TEMPLATETYPE", self.name, t1)
 
         newsh += self.generate_user_sh()
-        if (platform.linux_distribution(full_distribution_name=0)[0] in ("redhat", "centos", "SuSE", "fedora", "mandrake", "mandriva")):
-            newsh += re.sub("TEMPLATEFILE", self.file_name, script.rpm)
+        newsh += re.sub("TEMPLATEFILE", self.file_name, script.rpm)
 
         return newsh
 
@@ -1201,12 +1206,12 @@ allow %s_t %s_t:%s_socket name_%s;
             newspec += spec.define_relabel_files_begin
             if self.program:
                 newspec += re.sub("FILENAME", self.program, spec.define_relabel_files_end)
-            if self.initscript != "":
-                newspec += re.sub("FILENAME", self.initscript, spec.define_relabel_files_end)
-            for i in self.files.keys():
-                newspec += re.sub("FILENAME", i, spec.define_relabel_files_end)
-            for i in self.dirs.keys():
-                newspec += re.sub("FILENAME", i, spec.define_relabel_files_end)
+                if self.initscript != "":
+                    newspec += re.sub("FILENAME", self.initscript, spec.define_relabel_files_end)
+                for i in list(self.files.keys()):
+                    newspec += re.sub("FILENAME", i, spec.define_relabel_files_end)
+                for i in list(self.dirs.keys()):
+                    newspec += re.sub("FILENAME", i, spec.define_relabel_files_end)
 
         newspec += re.sub("VERSION", selinux_policyver, spec.base_section)
         newspec = re.sub("MODULENAME", self.file_name, newspec)
@@ -1266,13 +1271,15 @@ allow %s_t %s_t:%s_socket name_%s;
         return fcfile
 
     def __extract_rpms(self):
-        import yum
-        yb = yum.YumBase()
-        yb.setCacheDir()
+        import dnf
+        base = dnf.Base()
+        base.conf.cachedir = dnf.yum.misc.getCacheDir()
+        base.fill_sack()
+        installed = base.sack.query().installed()
 
-        for pkg in yb.rpmdb.searchProvides(self.program):
+        for pkg in installed.filter(file=self.program):
             self.rpms.append(pkg.name)
-            for fname in pkg.dirlist + pkg.filelist + pkg.ghostlist:
+            for fname in pkg.files:
                 for b in self.DEFAULT_DIRS:
                     if b == "/etc":
                         continue
@@ -1282,8 +1289,9 @@ allow %s_t %s_t:%s_socket name_%s;
                         else:
                             self.add_dir(fname)
 
-            for bpkg in yb.rpmdb.searchNames([pkg.base_package_name]):
-                for fname in bpkg.dirlist + bpkg.filelist + bpkg.ghostlist:
+            pkg_basename = '-'.join(pkg.sourcerpm.split('-')[0:-2])
+            for bpkg in installed.filter(name=pkg_basename):
+                for fname in bpkg.files:
                     for b in self.DEFAULT_DIRS:
                         if b == "/etc":
                             continue
@@ -1296,8 +1304,8 @@ allow %s_t %s_t:%s_socket name_%s;
         # some packages have own systemd subpackage
         # tor-systemd for example
         binary_name = self.program.split("/")[-1]
-        for bpkg in yb.rpmdb.searchNames(["%s-systemd" % binary_name]):
-            for fname in bpkg.filelist + bpkg.ghostlist + bpkg.dirlist:
+        for bpkg in installed.filter(name="%s-systemd" % binary_name):
+            for fname in bpkg.files:
                 for b in self.DEFAULT_DIRS:
                     if b == "/etc":
                         continue
@@ -1334,7 +1342,7 @@ allow %s_t %s_t:%s_socket name_%s;
         # we don't want to have subdir in the .fc policy file
         # if we already specify labeling for parent dir
         temp_basepath = []
-        for p in self.DEFAULT_DIRS.keys():
+        for p in list(self.DEFAULT_DIRS.keys()):
             temp_dirs = []
             try:
                 temp_basepath = self.DEFAULT_DIRS[p][1][0] + "/"
@@ -1349,9 +1357,9 @@ allow %s_t %s_t:%s_socket name_%s;
 
             if len(temp_dirs) is not 0:
                 for i in temp_dirs:
-                    if i in self.dirs.keys():
+                    if i in list(self.dirs.keys()):
                         del(self.dirs[i])
-                    elif i in self.files.keys():
+                    elif i in list(self.files.keys()):
                         del(self.files[i])
                     else:
                         continue
@@ -1382,7 +1390,6 @@ Warning %s does not exist
         out += "%s # %s\n" % (self.write_if(out_dir), _("Interface file"))
         out += "%s # %s\n" % (self.write_fc(out_dir), _("File Contexts file"))
         if self.type != NEWTYPE:
-            if (platform.linux_distribution(full_distribution_name=0)[0] in ("redhat", "centos", "SuSE", "fedora", "mandrake", "mandriva")):
-                out += "%s # %s\n" % (self.write_spec(out_dir), _("Spec file"))
+            out += "%s # %s\n" % (self.write_spec(out_dir), _("Spec file"))
             out += "%s # %s\n" % (self.write_sh(out_dir), _("Setup Script"))
         return out
diff --git policycoreutils-2.6/sepolicy/sepolicy/gui.py policycoreutils-2.6/sepolicy/sepolicy/gui.py
index 7f1888c..d3f2bdf 100644
--- policycoreutils-2.6/sepolicy/sepolicy/gui.py
+++ policycoreutils-2.6/sepolicy/sepolicy/gui.py
@@ -26,6 +26,8 @@
 #
 #
 
+import gi
+gi.require_version('Gtk', '3.0')
 from gi.repository import Gtk
 from gi.repository import Gdk
 from gi.repository import GLib
@@ -67,8 +69,8 @@ enabled = [_("No"), _("Yes")]
 action = [_("Disable"), _("Enable")]
 
 
-def compare(a, b):
-    return cmp(a.lower(), b.lower())
+def cmp(a, b):
+    return (a > b) - (a < b)
 
 import distutils.sysconfig
 ADVANCED_LABEL = (_("Advanced >>"), _("Advanced <<"))
@@ -110,6 +112,7 @@ class SELinuxGui():
 
     def __init__(self, app=None, test=False):
         self.finish_init = False
+        self.advanced_init = True
         self.opage = START_PAGE
         self.dbus = SELinuxDBus()
         try:
@@ -118,17 +121,11 @@ class SELinuxGui():
             print(e)
             self.quit()
 
-        sepolicy_domains = sepolicy.get_all_domains()
-        sepolicy_domains.sort(compare)
-        if app and app not in sepolicy_domains:
-            self.error(_("%s is not a valid domain" % app))
-            self.quit()
-
         self.init_cur()
         self.application = app
         self.filter_txt = ""
         builder = Gtk.Builder()  # BUILDER OBJ
-        self.code_path = distutils.sysconfig.get_python_lib(plat_specific=True) + "/sepolicy/"
+        self.code_path = distutils.sysconfig.get_python_lib(plat_specific=False) + "/sepolicy/"
         glade_file = self.code_path + "sepolicy.glade"
         builder.add_from_file(glade_file)
         self.outer_notebook = builder.get_object("outer_notebook")
@@ -147,7 +144,7 @@ class SELinuxGui():
         self.files_add = False
         self.network_add = False
 
-        self.all_list = []
+        self.all_domains = []
         self.installed_list = []
         self.previously_modified = {}
 
@@ -159,10 +156,10 @@ class SELinuxGui():
         self.invalid_entry = False
         # Advanced search window ****************************
         self.advanced_search_window = builder.get_object("advanced_search_window")
-        self.advanced_search_liststore = builder.get_object("Advanced_search_liststore")
-        self.advanced_search_liststore.set_sort_column_id(0, Gtk.SortType.ASCENDING)
         self.advanced_search_filter = builder.get_object("advanced_filter")
         self.advanced_search_filter.set_visible_func(self.filter_the_data)
+        self.advanced_search_sort = builder.get_object("advanced_sort")
+
         self.advanced_filter_entry = builder.get_object("advanced_filter_entry")
         self.advanced_search_treeview = builder.get_object("advanced_search_treeview")
         self.advanced_search = False
@@ -431,12 +428,10 @@ class SELinuxGui():
 
         # Combobox and Entry items **************************
         self.combobox_menu = builder.get_object("combobox_org")                    # This is the combobox box object, aka the arrow next to the entry text bar
-        self.combobox_menu_model = builder.get_object("application_liststore")
+        self.application_liststore = builder.get_object("application_liststore")
         self.completion_entry = builder.get_object("completion_entry")  # self.combobox_menu.get_child()
-        self.completion_entry_model = builder.get_object("application_liststore")
         self.entrycompletion_obj = builder.get_object("entrycompletion_obj")
         #self.entrycompletion_obj = Gtk.EntryCompletion()
-        self.entrycompletion_obj.set_model(self.completion_entry_model)
         self.entrycompletion_obj.set_minimum_key_length(0)
         self.entrycompletion_obj.set_text_column(0)
         self.entrycompletion_obj.set_match_func(self.match_func, None)
@@ -491,37 +486,41 @@ class SELinuxGui():
         self.loading = 1
         path = None
         if test:
-            domains = ["httpd_t", "abrt_t"]
-            if app and app not in domains:
-                domains.append(app)
+            self.all_domains = ["httpd_t", "abrt_t"]
+            if app and app not in self.all_domains:
+                self.all_domains.append(app)
         else:
-            domains = sepolicy_domains
-            loading_gui.show()
-        length = len(domains)
-        for domain in domains:
+            self.all_domains = sepolicy.get_all_domains()
+        self.all_domains.sort(key=str.lower)
+
+        if app and app not in self.all_domains:
+            self.error(_("%s is not a valid domain" % app))
+            self.quit()
+
+        loading_gui.show()
+        length = len(self.all_domains)
+
+        entrypoint_dict = sepolicy.get_init_entrypoints_str()
+        for domain in self.all_domains:
             # After the user selects a path in the drop down menu call
             # get_init_entrypoint_target(entrypoint) to get the transtype
             # which will give you the application
-            self.combo_box_initialize(domain, None)
-            self.advanced_search_initialize(domain)
-            self.all_list.append(domain)
+            self.combo_box_add(domain, domain)
             self.percentage = float(float(self.loading) / float(length))
             self.progress_bar.set_fraction(self.percentage)
             self.progress_bar.set_pulse_step(self.percentage)
             self.idle_func()
 
-            entrypoint = sepolicy.get_init_entrypoint(domain)
-            if entrypoint:
+            for entrypoint in entrypoint_dict.get(domain, []):
                 path = sepolicy.find_entrypoint_path(entrypoint)
                 if path:
-                    self.combo_box_initialize(path, None)
-                    # Adds all files entrypoint paths that exists on disc
-                    # into the combobox
-                    self.advanced_search_initialize(path)
+                    self.combo_box_add(path, domain)
                     self.installed_list.append(path)
 
             self.loading += 1
         loading_gui.hide()
+        self.entrycompletion_obj.set_model(self.application_liststore)
+        self.advanced_search_treeview.set_model(self.advanced_search_sort)
 
         dic = {
             "on_combo_button_clicked": self.open_combo_menu,
@@ -553,7 +552,7 @@ class SELinuxGui():
             "on_file_equiv_button_clicked": self.show_file_equiv_page,
             "on_app/system_button_clicked": self.system_interface,
             "on_app/users_button_clicked": self.users_interface,
-            "on_main_advanced_label_button_press_event": self.advanced_label_main,
+            "on_show_advanced_search_window": self.on_show_advanced_search_window,
 
             "on_Show_mislabeled_files_toggled": self.show_mislabeled_files,
             "on_Browse_button_files_clicked": self.browse_for_files,
@@ -569,8 +568,6 @@ class SELinuxGui():
             "on_advanced_filter_entry_changed": self.get_advanced_filter_data,
             "on_advanced_search_treeview_row_activated": self.advanced_item_selected,
             "on_Select_advanced_search_clicked": self.advanced_item_button_push,
-            "on_All_advanced_button_toggled": self.advanced_radio_select,
-            "on_Installed_advanced_button_toggled": self.advanced_radio_select,
             "on_info_button_button_press_event": self.on_help_button,
             "on_back_button_clicked": self.on_help_back_clicked,
             "on_forward_button_clicked": self.on_help_forward_clicked,
@@ -711,7 +708,7 @@ class SELinuxGui():
 
     def match_func(self, completion, key_string, iter, func_data):
         try:
-            if self.combobox_menu_model.get_value(iter, 0).find(key_string) != -1:
+            if self.application_liststore.get_value(iter, 0).find(key_string) != -1:
                 return True
             return False
         except AttributeError:
@@ -834,8 +831,7 @@ class SELinuxGui():
             self.enforce_button = self.disabled_button_default
 
     def populate_system_policy(self):
-        selinux_path = selinux.selinux_path()
-        types = map(lambda x: x[1], filter(lambda x: x[0] == selinux_path, os.walk(selinux_path)))[0]
+        types = next(os.walk(selinux.selinux_path(), topdown=True))[1]
         types.sort()
         ctr = 0
         for item in types:
@@ -922,11 +918,11 @@ class SELinuxGui():
         self.ready_mouse()
 
     def network_initialize(self, app):
-        netd = sepolicy.network.get_network_connect(app, "tcp", "name_connect")
+        netd = sepolicy.network.get_network_connect(app, "tcp", "name_connect", check_bools=True)
         self.net_update(app, netd, "tcp", OUTBOUND_PAGE, self.network_out_liststore)
-        netd = sepolicy.network.get_network_connect(app, "tcp", "name_bind")
+        netd = sepolicy.network.get_network_connect(app, "tcp", "name_bind", check_bools=True)
         self.net_update(app, netd, "tcp", INBOUND_PAGE, self.network_in_liststore)
-        netd = sepolicy.network.get_network_connect(app, "udp", "name_bind")
+        netd = sepolicy.network.get_network_connect(app, "udp", "name_bind", check_bools=True)
         self.net_update(app, netd, "udp", INBOUND_PAGE, self.network_in_liststore)
 
     def network_initial_data_insert(self, model, ports, portType, protocol):
@@ -962,12 +958,12 @@ class SELinuxGui():
         iter = liststore.get_iter(index)
         return liststore.get_value(iter, 0)
 
-    def combo_box_initialize(self, val, desc):
+    def combo_box_add(self, val, val1):
         if val is None:
             return
-        iter = self.combobox_menu_model.append()
-        for f in val:
-            self.combobox_menu_model.set_value(iter, 0, val)
+        iter = self.application_liststore.append()
+        self.application_liststore.set_value(iter, 0, val)
+        self.application_liststore.set_value(iter, 1, val1)
 
     def select_type_more(self, *args):
         app = self.moreTypes_treeview.get_selection()
@@ -983,19 +979,18 @@ class SELinuxGui():
         model, iter = row.get_selected()
         iter = model.convert_iter_to_child_iter(iter)
         iter = self.advanced_search_filter.convert_iter_to_child_iter(iter)
-        app = self.advanced_search_liststore.get_value(iter, 1)
+        app = self.application_liststore.get_value(iter, 1)
         if app is None:
             return
         self.advanced_filter_entry.set_text('')
         self.advanced_search_window.hide()
         self.reveal_advanced(self.main_advanced_label)
         self.completion_entry.set_text(app)
-        self.application_selected()
 
     def advanced_item_selected(self, treeview, path, *args):
         iter = self.advanced_search_filter.get_iter(path)
         iter = self.advanced_search_filter.convert_iter_to_child_iter(iter)
-        app = self.advanced_search_liststore.get_value(iter, 1)
+        app = self.application_liststore.get_value(iter, 1)
         self.advanced_filter_entry.set_text('')
         self.advanced_search_window.hide()
         self.reveal_advanced(self.main_advanced_label)
@@ -1004,7 +999,7 @@ class SELinuxGui():
 
     def find_application(self, app):
         if app and len(app) > 0:
-            for items in self.combobox_menu_model:
+            for items in self.application_liststore:
                 if app == items[0]:
                     return True
         return False
@@ -1066,9 +1061,9 @@ class SELinuxGui():
         self.transitions_into_tab.set_label(_("Application Transitions Into '%s'" % app))
         self.transitions_from_tab.set_label(_("Application Transitions From '%s'" % app))
         self.transitions_file_tab.set_label(_("File Transitions From '%s'" % app))
-        self.transitions_into_tab.set_tooltip_text(_("Executables which will transition to the '%s', when executing a selected domains entrypoint.") % app)
-        self.transitions_from_tab.set_tooltip_text(_("Executables which will transition to a different domain, when the '%s' executes them.") % app)
-        self.transitions_file_tab.set_tooltip_text(_("Files by '%s' will transitions to a different label." % app))
+        self.transitions_into_tab.set_tooltip_text(_("Executables which will transition to '%s', when executing selected domains entrypoint.") % app)
+        self.transitions_from_tab.set_tooltip_text(_("Executables which will transition to a different domain, when '%s' executes them.") % app)
+        self.transitions_file_tab.set_tooltip_text(_("Files by '%s' with transitions to a different label." % app))
         self.transitions_radio_button.set_tooltip_text(_("Display applications that can transition into or out of the '%s'." % app))
 
         self.application = app
@@ -1290,11 +1285,11 @@ class SELinuxGui():
             niter = self.transitions_from_treestore.append(iter)
             # active[0][1] is either T or F (enabled is all the way at the top)
             self.transitions_from_treestore.set_value(iter, 0, enabled[active[0][1]])
-            markup = '<span foreground="blue"><u>%s</u></span>'
+            markup = ('<span foreground="blue"><u>','</u></span>')
             if active[0][1]:
-                self.transitions_from_treestore.set_value(niter, 2, (_("To disable this transition, go to the " + markup % _("Boolean section."))))
+                self.transitions_from_treestore.set_value(niter, 2, (_("To disable this transition, go to the %sBoolean section%s.") % markup))
             else:
-                self.transitions_from_treestore.set_value(niter, 2, (_("To enable this transition, go to the " + markup % _("Boolean section."))))
+                self.transitions_from_treestore.set_value(niter, 2, (_("To enable this transition, go to the %sBoolean section%s.") % markup))
 
             # active[0][0] is the Bool Name
             self.transitions_from_treestore.set_value(niter, 1, active[0][0])
@@ -1635,7 +1630,7 @@ class SELinuxGui():
         self.files_type_combolist.clear()
         self.files_class_combolist.clear()
         compare = self.strip_domain(self.application)
-        for d in self.completion_entry_model:
+        for d in self.application_liststore:
             if d[0].startswith(compare) and d[0] != self.application and not d[0].startswith("httpd_sys"):
                 exclude_list.append(self.strip_domain(d[0]))
 
@@ -1714,10 +1709,10 @@ class SELinuxGui():
 
         try:
             if ipage == OUTBOUND_PAGE:
-                netd = sepolicy.network.get_network_connect(self.application, "tcp", "name_connect")
+                netd = sepolicy.network.get_network_connect(self.application, "tcp", "name_connect", check_bools=True)
             elif ipage == INBOUND_PAGE:
-                netd = sepolicy.network.get_network_connect(self.application, "tcp", "name_bind")
-                netd += sepolicy.network.get_network_connect(self.application, "udp", "name_bind")
+                netd = sepolicy.network.get_network_connect(self.application, "tcp", "name_bind", check_bools=True)
+                netd += sepolicy.network.get_network_connect(self.application, "udp", "name_bind", check_bools=True)
 
             port_types = []
             for k in netd.keys():
@@ -2550,34 +2545,7 @@ class SELinuxGui():
         self.network_mls_label.set_visible(advanced)
         self.network_mls_entry.set_visible(advanced)
 
-    def advanced_search_initialize(self, path):
-        try:
-            if path[0] == '/':
-                domain = sepolicy.get_init_transtype(path)
-            else:
-                domain = path
-        except IndexError:
-            return
-        except OSError:
-            return
-        iter = self.advanced_search_liststore.append()
-        self.advanced_search_liststore.set_value(iter, 0, path)
-        self.advanced_search_liststore.set_value(iter, 1, domain)
-        user_types = sepolicy.get_user_types()
-        if domain in user_types + ['initrc_t']:
-            return
-
-        entrypoints = sepolicy.get_entrypoints(domain)
-        # From entry_point = 0 to the number of keys in the dic
-        for exe in entrypoints:
-            if len(entrypoints[exe]):
-                file_class = entrypoints[exe][1]
-                for path in entrypoints[exe][0]:
-                    iter = self.advanced_search_liststore.append()
-                    self.advanced_search_liststore.set_value(iter, 1, domain)
-                    self.advanced_search_liststore.set_value(iter, 0, path)
-
-    def advanced_label_main(self, label, *args):
+    def on_show_advanced_search_window(self, label, *args):
         if label.get_text() == ADVANCED_SEARCH_LABEL[1]:
             label.set_text(ADVANCED_SEARCH_LABEL[0])
             self.close_popup()
@@ -2585,33 +2553,18 @@ class SELinuxGui():
             label.set_text(ADVANCED_SEARCH_LABEL[1])
             self.show_popup(self.advanced_search_window)
 
-    def advanced_radio_select(self, button):
-        label = ""
-        if button.get_active():
-            label = button.get_label()
-        if label == '':
-            return
-        self.advanced_search_liststore.clear()
-        if label == "All":
-            for items in self.all_list:
-                self.advanced_search_initialize(items)
-                self.idle_func()
-
-        elif label == "Installed":
-            if self.installed_list == []:
-                return
-            for items in self.installed_list:
-                self.advanced_search_initialize(items)
-                self.idle_func()
-
     def set_enforce_text(self, value):
         if value:
             self.status_bar.push(self.context_id, _("System Status: Enforcing"))
+            self.current_status_enforcing.set_active(True)
         else:
             self.status_bar.push(self.context_id, _("System Status: Permissive"))
-        self.current_status_permissive.set_active(True)
+            self.current_status_permissive.set_active(True)
 
     def set_enforce(self, button):
+        if not self.finish_init:
+            return
+
         self.dbus.setenforce(button.get_active())
         self.set_enforce_text(button.get_active())
 
diff --git policycoreutils-2.6/sepolicy/sepolicy/interface.py policycoreutils-2.6/sepolicy/sepolicy/interface.py
index c2cb971..1ab34af 100644
--- policycoreutils-2.6/sepolicy/sepolicy/interface.py
+++ policycoreutils-2.6/sepolicy/sepolicy/interface.py
@@ -39,6 +39,11 @@ try:
     if sys.version_info < (3,):
         kwargs['unicode'] = True
     gettext.install(PROGNAME,
+                    unicode=True,
+                    codeset='utf-8')
+except TypeError:
+    # Failover to python3 install
+    gettext.install(PROGNAME,
                     localedir="/usr/share/locale",
                     codeset='utf-8',
                     **kwargs)
@@ -55,7 +60,7 @@ def get_interfaces_from_xml(path):
     """ Get all interfaces from given xml file"""
     interfaces_list = []
     idict = get_interface_dict(path)
-    for k in idict.keys():
+    for k in list(idict.keys()):
         interfaces_list.append(k)
     return interfaces_list
 
@@ -80,7 +85,7 @@ def get_admin(path=""):
         try:
             xml_path = get_xml_file(path)
             idict = get_interface_dict(xml_path)
-            for k in idict.keys():
+            for k in list(idict.keys()):
                 if k.endswith("_admin"):
                     admin_list.append(k)
         except IOError as e:
@@ -102,7 +107,7 @@ def get_user(path=""):
         try:
             xml_path = get_xml_file(path)
             idict = get_interface_dict(xml_path)
-            for k in idict.keys():
+            for k in list(idict.keys()):
                 if k.endswith("_role"):
                     if (("%s_exec_t" % k[:-5]) in sepolicy.get_all_types()):
                         trans_list.append(k)
@@ -125,12 +130,19 @@ def get_interface_dict(path="/usr/share/selinux/devel/policy.xml"):
     global interface_dict
     import os
     import xml.etree.ElementTree
+    from sepolicy import get_all_modules, get_all_modules_from_mod_lst
     if interface_dict:
         return interface_dict
 
+    active_modules = []
     interface_dict = {}
     param_list = []
 
+    active_modules = get_all_modules_from_mod_lst()
+    if active_modules is None:
+        print((_("Using only non-base modules.")))
+        active_modules = get_all_modules()
+
     xml_path = """<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
 <policy>
 <layer name="admin">
@@ -171,7 +183,7 @@ def get_interface_format_text(interface, path="/usr/share/selinux/devel/policy.x
 
 
 def get_interface_compile_format_text(interfaces_dict, interface):
-    from templates import test_module
+    from .templates import test_module
     param_tmp = []
     for i in interfaces_dict[interface][0]:
         param_tmp.append(test_module.dict_values[i])
@@ -181,7 +193,7 @@ def get_interface_compile_format_text(interfaces_dict, interface):
 
 
 def generate_compile_te(interface, idict, name="compiletest"):
-    from templates import test_module
+    from .templates import test_module
     te = ""
     te += re.sub("TEMPLATETYPE", name, test_module.te_test_module)
     te += get_interface_compile_format_text(idict, interface)
@@ -192,41 +204,47 @@ def generate_compile_te(interface, idict, name="compiletest"):
 def get_xml_file(if_file):
     """ Returns xml format of interfaces for given .if policy file"""
     import os
-    import commands
+    import subprocess
     basedir = os.path.dirname(if_file) + "/"
     filename = os.path.basename(if_file).split(".")[0]
-    rc, output = commands.getstatusoutput("python /usr/share/selinux/devel/include/support/segenxml.py -w -m %s" % basedir + filename)
-    if rc != 0:
+    try:
+        output = subprocess.check_output("python /usr/share/selinux/devel/include/support/segenxml.py -w -m %s" % basedir + filename,
+                                         stderr=subprocess.STDOUT,
+                                         shell=True)
+        return output
+    except subprocess.CalledProcessError as e:
         sys.stderr.write("\n Could not proceed selected interface file.\n")
-        sys.stderr.write("\n%s" % output)
+        sys.stderr.write(e.output)
         sys.exit(1)
-    else:
-        return output
 
 
 def interface_compile_test(interface, path="/usr/share/selinux/devel/policy.xml"):
     exclude_interfaces = ["userdom", "kernel", "corenet", "files", "dev"]
+    exclude_interface_name = ["selinux_genbool"]
     exclude_interface_type = ["template"]
 
-    import commands
+    import subprocess
     import os
     policy_files = {'pp': "compiletest.pp", 'te': "compiletest.te", 'fc': "compiletest.fc", 'if': "compiletest.if"}
     idict = get_interface_dict(path)
 
-    if not (interface.split("_")[0] in exclude_interfaces or idict[interface][2] in exclude_interface_type):
-        print(_("Compiling %s interface" % interface))
+    if not (interface in exclude_interface_name or interface.split("_")[0] in exclude_interfaces or idict[interface][2] in exclude_interface_type):
+        print((_("Compiling %s interface" % interface)))
         try:
             fd = open(policy_files['te'], "w")
             fd.write(generate_compile_te(interface, idict))
             fd.close()
-            rc, output = commands.getstatusoutput("make -f /usr/share/selinux/devel/Makefile %s" % policy_files['pp'])
-            if rc != 0:
-                sys.stderr.write(output)
+            try:
+                subprocess.check_output("make -f /usr/share/selinux/devel/Makefile %s" % policy_files['pp'],
+                                        stderr=subprocess.STDOUT,
+                                        shell=True)
+            except subprocess.CalledProcessError as e:
                 sys.stderr.write(_("\nCompile test for %s failed.\n") % interface)
+                sys.stderr.write(e.output)
 
         except EnvironmentError as e:
             sys.stderr.write(_("\nCompile test for %s has not run. %s\n") % (interface, e))
-        for v in policy_files.values():
+        for v in list(policy_files.values()):
             if os.path.exists(v):
                 os.remove(v)
 
diff --git policycoreutils-2.6/sepolicy/sepolicy/manpage.py policycoreutils-2.6/sepolicy/sepolicy/manpage.py
index 7365f93..210e258 100755
--- policycoreutils-2.6/sepolicy/sepolicy/manpage.py
+++ policycoreutils-2.6/sepolicy/sepolicy/manpage.py
@@ -27,11 +27,18 @@ __all__ = ['ManPage', 'HTMLManPages', 'manpage_domains', 'manpage_roles', 'gen_d
 import string
 import selinux
 import sepolicy
-import commands
 import os
 import time
 
-equiv_dict = {"smbd": ["samba"], "httpd": ["apache"], "virtd": ["virt", "libvirt", "svirt", "svirt_tcg", "svirt_lxc_t", "svirt_lxc_net_t"], "named": ["bind"], "fsdaemon": ["smartmon"], "mdadm": ["raid"]}
+
+typealias_types = {
+    "antivirus_t": ("amavis_t", "clamd_t", "clamscan_t", "freshclam_t"),
+    "cluster_t": ("rgmanager_t", "corosync_t", "aisexec_t", "pacemaker_t"),
+    "svirt_t": ("qemu_t"),
+    "httpd_t": ("phpfpm_t"),
+}
+
+equiv_dict = {"smbd": ["samba"], "httpd": ["apache"], "virtd": ["virt", "libvirt"], "named": ["bind"], "fsdaemon": ["smartmon"], "mdadm": ["raid"]}
 
 equiv_dirs = ["/var"]
 modules_dict = None
@@ -106,8 +113,8 @@ def gen_domains():
     for d in sepolicy.get_all_domains():
         found = False
         domain = d[:-2]
-#		if domain + "_exec_t" not in get_entrypoints():
-#			continue
+#                if domain + "_exec_t" not in get_entrypoints():
+#                        continue
         if domain in domains:
             continue
         domains.append(domain)
@@ -144,9 +151,6 @@ def prettyprint(f, trim):
 manpage_domains = []
 manpage_roles = []
 
-fedora_releases = ["Fedora17", "Fedora18"]
-rhel_releases = ["RHEL6", "RHEL7"]
-
 
 def get_alphabet_manpages(manpage_list):
     alphabet_manpages = dict.fromkeys(string.ascii_letters, [])
@@ -162,7 +166,11 @@ def get_alphabet_manpages(manpage_list):
 
 
 def convert_manpage_to_html(html_manpage, manpage):
-    rc, output = commands.getstatusoutput("/usr/bin/groff -man -Thtml %s 2>/dev/null" % manpage)
+    try:
+            from commands import getstatusoutput
+    except ImportError:
+            from subprocess import getstatusoutput
+    rc, output = getstatusoutput("/usr/bin/groff -man -Thtml %s 2>/dev/null" % manpage)
     if rc == 0:
         print(html_manpage, "has been created")
         fd = open(html_manpage, 'w')
@@ -171,7 +179,6 @@ def convert_manpage_to_html(html_manpage, manpage):
 
 
 class HTMLManPages:
-
     """
             Generate a HHTML Manpages on an given SELinux domains
     """
@@ -181,30 +188,30 @@ class HTMLManPages:
         self.manpage_domains = get_alphabet_manpages(manpage_domains)
         self.os_version = os_version
         self.old_path = path + "/"
-        self.new_path = self.old_path + self.os_version + "/"
+        self.new_path = self.old_path
+
+        if self.os_version:
 
-        if self.os_version in fedora_releases or rhel_releases:
             self.__gen_html_manpages()
         else:
-            print("SELinux HTML man pages can not be generated for this %s" % os_version)
+            print(("SELinux HTML man pages can not be generated for this %s" % os_version))
             exit(1)
 
     def __gen_html_manpages(self):
         self._write_html_manpage()
         self._gen_index()
-        self._gen_body()
         self._gen_css()
 
     def _write_html_manpage(self):
         if not os.path.isdir(self.new_path):
             os.mkdir(self.new_path)
 
-        for domain in self.manpage_domains.values():
+        for domain in list(self.manpage_domains.values()):
             if len(domain):
                 for d in domain:
                     convert_manpage_to_html((self.new_path + d.split("_selinux")[0] + ".html"), self.old_path + d)
 
-        for role in self.manpage_roles.values():
+        for role in list(self.manpage_roles.values()):
             if len(role):
                 for r in role:
                     convert_manpage_to_html((self.new_path + r.split("_selinux")[0] + ".html"), self.old_path + r)
@@ -261,16 +268,16 @@ Fedora or Red Hat Enterprise Linux Man Pages.</h2>
         fd.write("""
 <html>
 <head>
-	<link rel=stylesheet type="text/css" href="../style.css" title="style">
-	<title>Linux man-pages online for Fedora18</title>
+        <link rel=stylesheet type="text/css" href="style.css" title="style">
+        <title>SELinux man pages</title>
 </head>
 <body>
-<h1>SELinux man pages for Fedora18</h1>
+<h1>SELinux man pages for %s</h1>
 <hr>
 <table><tr>
 <td valign="middle">
 <h3>SELinux roles</h3>
-""")
+""" % self.os_version)
         for letter in self.manpage_roles:
             if len(self.manpage_roles[letter]):
                 fd.write("""
@@ -324,7 +331,7 @@ Fedora or Red Hat Enterprise Linux Man Pages.</h2>
 """ % domainname_body)
 
         fd.close()
-        print("%s has been created") % html
+        print(("%s has been created") % html)
 
     def _gen_css(self):
         style_css = self.old_path + "style.css"
@@ -338,9 +345,9 @@ html, body {
 }
 
 h1, h2, h3, h4, h5, h5 {
-	color: #2d7c0b;
-	font-family: arial, sans-serif;
-	margin-top: 25px;
+        color: #2d7c0b;
+        font-family: arial, sans-serif;
+        margin-top: 25px;
 }
 
 a {
@@ -387,11 +394,10 @@ pre.code {
 """)
 
         fd.close()
-        print("%s has been created") % style_css
+        print(("%s has been created") % style_css)
 
 
 class ManPage:
-
     """
         Generate a Manpage on an SELinux domain in the specified path
     """
@@ -449,7 +455,7 @@ class ManPage:
             self.__gen_man_page()
         self.fd.close()
 
-        for k in equiv_dict.keys():
+        for k in list(equiv_dict.keys()):
             if k == self.domainname:
                 for alias in equiv_dict[k]:
                     self.__gen_man_page_link(alias)
@@ -501,6 +507,7 @@ class ManPage:
             self._booleans()
 
         self._port_types()
+        self._mcs_types()
         self._writes()
         self._footer()
 
@@ -512,6 +519,7 @@ class ManPage:
         print(path)
 
     def __gen_man_page(self):
+
         self.anon_list = []
 
         self.attributes = {}
@@ -519,11 +527,22 @@ class ManPage:
         self._get_ptypes()
 
         for domain_type in self.ptypes:
+            try:
+                if typealias_types[domain_type]:
+                    fd = self.fd
+                    man_page_path = self.man_page_path
+                    for t in typealias_types[domain_type]:
+                        self._typealias_gen_man(t)
+                    self.fd = fd
+                    self.man_page_path = man_page_path
+            except KeyError:
+                continue
             self.attributes[domain_type] = sepolicy.info(sepolicy.TYPE, ("%s") % domain_type)[0]["attributes"]
 
         self._header()
         self._entrypoints()
         self._process_types()
+        self._mcs_types()
         self._booleans()
         self._nsswitch_domain()
         self._port_types()
@@ -537,6 +556,34 @@ class ManPage:
             if f.startswith(self.short_name) or f.startswith(self.domainname):
                 self.ptypes.append(f)
 
+    def _typealias_gen_man(self, t):
+        self.man_page_path = "%s/%s_selinux.8" % (self.path, t[:-2])
+        self.ports = []
+        self.booltext = ""
+        self.fd = open(self.man_page_path, 'w')
+        self._typealias(t[:-2])
+        self._footer()
+        self.fd.close()
+
+    def _typealias(self, typealias):
+        self.fd.write('.TH  "%(typealias)s_selinux"  "8"  "%(date)s" "%(typealias)s" "SELinux Policy %(typealias)s"'
+                      % {'typealias': typealias, 'date': time.strftime("%y-%m-%d")})
+        self.fd.write(r"""
+.SH "NAME"
+%(typealias)s_selinux \- Security Enhanced Linux Policy for the %(typealias)s processes
+.SH "DESCRIPTION"
+
+%(typealias)s_t SELinux domain type is now associated with %(domainname)s domain type (%(domainname)s_t). 
+""" % {'typealias': typealias, 'domainname': self.domainname})
+
+        self.fd.write(r"""
+Please see 
+
+.B %(domainname)s_selinux 
+
+man page for more details.
+"""  % {'domainname': self.domainname})
+
     def _header(self):
         self.fd.write('.TH  "%(domainname)s_selinux"  "8"  "%(date)s" "%(domainname)s" "SELinux Policy %(domainname)s"'
                       % {'domainname': self.domainname, 'date': time.strftime("%y-%m-%d")})
@@ -596,7 +643,7 @@ SELinux policy is customizable based on least access required.  %s policy is ext
         nsswitch_types = []
         nsswitch_booleans = ['authlogin_nsswitch_use_ldap', 'kerberos_enabled']
         nsswitchbooltext = ""
-        for k in self.attributes.keys():
+        for k in list(self.attributes.keys()):
             if "nsswitch_domain" in self.attributes[k]:
                 nsswitch_types.append(k)
 
@@ -686,10 +733,13 @@ Default Defined Ports:""")
 
     def _file_context(self):
         flist = []
+        flist_non_exec = []
         mpaths = []
         for f in self.all_file_types:
             if f.startswith(self.domainname):
                 flist.append(f)
+                if not file_type_is_executable(f) or not file_type_is_entrypoint(f):
+                    flist_non_exec.append(f)
                 if f in self.fcdict:
                     mpaths = mpaths + self.fcdict[f]["regex"]
         if len(mpaths) == 0:
@@ -741,14 +791,15 @@ SELinux %(domainname)s policy is very flexible allowing users to setup their %(d
 .PP
 """ % {'domainname': self.domainname, 'equiv': e, 'alt': e.split('/')[-1]})
 
-        self.fd.write(r"""
+        if flist_non_exec:
+            self.fd.write(r"""
 .PP
 .B STANDARD FILE CONTEXT
 
 SELinux defines the file context types for the %(domainname)s, if you wanted to
 store files with these types in a diffent paths, you need to execute the semanage command to sepecify alternate labeling and then use restorecon to put the labels on disk.
 
-.B semanage fcontext -a -t %(type)s '/srv/%(domainname)s/content(/.*)?'
+.B semanage fcontext -a -t %(type)s '/srv/my%(domainname)s_content(/.*)?'
 .br
 .B restorecon -R -v /srv/my%(domainname)s_content
 
@@ -890,7 +941,7 @@ selinux(8), %s(8), semanage(8), restorecon(8), chcon(1), sepolicy(8)
 
     def _entrypoints(self):
         try:
-            entrypoints = map(lambda x: x['target'], sepolicy.search([sepolicy.ALLOW], {'source': self.type, 'permlist': ['entrypoint'], 'class': 'file'}))
+            entrypoints = [x['target'] for x in sepolicy.search([sepolicy.ALLOW], {'source': self.type, 'permlist': ['entrypoint'], 'class':'file'})]
         except:
             return
 
@@ -920,6 +971,17 @@ All executeables with the default executable label, usually stored in /usr/bin a
         self.fd.write("""
 %s""" % ", ".join(paths))
 
+    def _mcs_types(self):
+        attributes = sepolicy.info(sepolicy.TYPE, (self.type))[0]["attributes"]
+        if "mcs_constrained_type" not in attributes:
+            return
+        self.fd.write ("""
+.SH "MCS Constrained"
+The SELinux process type %(type)s_t is an MCS (Multi Category Security) constrained type.  Sometimes this separation is referred to as sVirt. These types are usually used for securing multi-tenant environments, such as virtualization, containers or separation of users.  The tools used to launch MCS types, pick out a different MCS label for each process group.
+
+For example one process might be launched with %(type)s_t:s0:c1,c2, and another process launched with %(type)s_t:s0:c3,c4. The SELinux kernel only allows these processes can only write to content with a matching MCS label, or a MCS Label of s0. A process running with the MCS level of s0:c1,c2 is not allowed to write to content with the MCS label of s0:c3,c4
+""" % {'type': self.domainname})
+
     def _writes(self):
         permlist = sepolicy.search([sepolicy.ALLOW], {'source': self.type, 'permlist': ['open', 'write'], 'class': 'file'})
         if permlist is None or len(permlist) == 0:
@@ -1156,7 +1218,7 @@ Three things can happen when %(type)s attempts to execute a program.
 
 Execute the following to see the types that the SELinux user %(type)s can execute without transitioning:
 
-.B search -A -s %(type)s -c file -p execute_no_trans
+.B sesearch -A -s %(type)s -c file -p execute_no_trans
 
 .TP
 
@@ -1164,7 +1226,7 @@ Execute the following to see the types that the SELinux user %(type)s can execut
 
 Execute the following to see the types that the SELinux user %(type)s can execute and transition:
 
-.B $ search -A -s %(type)s -c process -p transition
+.B $ sesearch -A -s %(type)s -c process -p transition
 
 """ % {'user': self.domainname, 'type': self.type})
 
@@ -1228,7 +1290,7 @@ You need to add %(user)s_r to the staff_u user.  You could setup the staff_u use
 SELinux policy also controls which roles can transition to a different role.
 You can list these rules using the following command.
 
-.B search --role_allow
+.B sesearch --role_allow
 
 SELinux policy allows the %s role%s can transition to the %s_r role.
 
diff --git policycoreutils-2.6/sepolicy/sepolicy/network.py policycoreutils-2.6/sepolicy/sepolicy/network.py
index c4d95da..115f6b8 100755
--- policycoreutils-2.6/sepolicy/sepolicy/network.py
+++ policycoreutils-2.6/sepolicy/sepolicy/network.py
@@ -23,20 +23,20 @@
 import sepolicy
 
 
-def get_types(src, tclass, perm):
+def get_types(src, tclass, perm, check_bools=False):
     allows = sepolicy.search([sepolicy.ALLOW], {sepolicy.SOURCE: src, sepolicy.CLASS: tclass, sepolicy.PERMS: perm})
     nlist = []
     if allows:
-        for i in map(lambda y: y[sepolicy.TARGET], filter(lambda x: set(perm).issubset(x[sepolicy.PERMS]), allows)):
+        for i in map(lambda y: y[sepolicy.TARGET], filter(lambda x: set(perm).issubset(x[sepolicy.PERMS]) and (not check_bools or x["enabled"]), allows)):
             if i not in nlist:
                 nlist.append(i)
     return nlist
 
 
-def get_network_connect(src, protocol, perm):
+def get_network_connect(src, protocol, perm, check_bools=False):
     portrecs, portrecsbynum = sepolicy.gen_port_dict()
     d = {}
-    tlist = get_types(src, "%s_socket" % protocol, [perm])
+    tlist = get_types(src, "%s_socket" % protocol, [perm], check_bools)
     if len(tlist) > 0:
         d[(src, protocol, perm)] = []
         for i in tlist:
diff --git policycoreutils-2.6/sepolicy/sepolicy/sepolicy.glade policycoreutils-2.6/sepolicy/sepolicy/sepolicy.glade
index 1275c7f..83822dd 100644
--- policycoreutils-2.6/sepolicy/sepolicy/sepolicy.glade
+++ policycoreutils-2.6/sepolicy/sepolicy/sepolicy.glade
@@ -2,7 +2,7 @@
 <!-- Generated with glade 3.16.0 on Fri Oct 11 08:24:19 2013 -->
 <interface>
   <!-- interface-requires gtk+ 3.8 -->
-  <object class="GtkListStore" id="Advanced_search_liststore">
+  <object class="GtkListStore" id="application_liststore">
     <columns>
       <!-- column-name Application -->
       <column type="gchararray"/>
@@ -82,7 +82,7 @@
             <attributes>
               <attribute name="foreground" value="#00004e4e9999"/>
             </attributes>
-            <signal name="button-press-event" handler="on_main_advanced_label_button_press_event" swapped="no"/>
+            <signal name="button-press-event" handler="on_show_advanced_search_window" swapped="no"/>
           </object>
           <packing>
             <property name="expand">True</property>
@@ -225,7 +225,7 @@
     </child>
   </object>
   <object class="GtkTreeModelFilter" id="advanced_filter">
-    <property name="child_model">Advanced_search_liststore</property>
+    <property name="child_model">application_liststore</property>
   </object>
   <object class="GtkTreeModelSort" id="advanced_sort">
     <property name="model">advanced_filter</property>
@@ -256,24 +256,6 @@
   <object class="GtkTreeModelSort" id="application_files_sort">
     <property name="model">application_files_filter</property>
   </object>
-  <object class="GtkListStore" id="application_liststore">
-    <columns>
-      <!-- column-name Application -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkTreeModelFilter" id="application_filter">
-    <property name="child_model">application_liststore</property>
-  </object>
-  <object class="GtkTreeModelSort" id="application_sort">
-    <property name="model">application_filter</property>
-  </object>
-  <object class="GtkListStore" id="application_tree_list">
-    <columns>
-      <!-- column-name Process -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
   <object class="GtkListStore" id="boolean_liststore">
     <columns>
       <!-- column-name Active -->
@@ -473,7 +455,7 @@
             <property name="can_focus">False</property>
             <property name="xalign">0</property>
             <property name="xpad">10</property>
-            <property name="label" translatable="yes">Add file Equivilence Mapping.  Mapping will be created when Update is applied.</property>
+            <property name="label" translatable="yes">Add file Equivalence Mapping.  Mapping will be created when Update is applied.</property>
             <property name="justify">fill</property>
             <property name="wrap">True</property>
           </object>
@@ -823,7 +805,7 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
-                        <property name="tooltip_text" translatable="yes">Select Make Path Recursive iff you want to apply this label to all children of the specified directory path. objects under the directory to have this label.</property>
+                        <property name="tooltip_text" translatable="yes">Select Make Path Recursive if you want to apply this label to all children of the specified directory path. objects under the directory to have this label.</property>
                         <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                         <signal name="toggled" handler="on_make_path_recursive_toggled" swapped="no"/>
@@ -1061,7 +1043,7 @@
               <object class="GtkImage" id="help_image">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="pixbuf">images/booleans.png</property>
+                <property name="pixbuf">help/booleans.png</property>
               </object>
               <packing>
                 <property name="expand">False</property>
@@ -2948,7 +2930,7 @@ Enabled</property>
                                     <property name="tooltip_text" translatable="yes">Executables which will transition to a different domain, when the 'selected domain' executes them.</property>
                                     <property name="xpad">1</property>
                                     <property name="ypad">1</property>
-                                    <property name="label" translatable="yes">Applicaton Transitions From 'select domain'</property>
+                                    <property name="label" translatable="yes">Application Transitions From 'select domain'</property>
                                   </object>
                                   <packing>
                                     <property name="position">1</property>
@@ -4328,46 +4310,7 @@ allow alternative access control.</property>
                 <property name="position">0</property>
               </packing>
             </child>
-            <child>
-              <object class="GtkRadioButton" id="All_advanced_button">
-                <property name="label" translatable="yes">All</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="xalign">0.5</property>
-                <property name="active">True</property>
-                <property name="draw_indicator">True</property>
-                <signal name="toggled" handler="on_All_advanced_button_toggled" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkRadioButton" id="Installed_advanced_button">
-                <property name="label" translatable="yes">Installed</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="xalign">0.5</property>
-                <property name="draw_indicator">True</property>
-                <property name="group">All_advanced_button</property>
-                <signal name="toggled" handler="on_Installed_advanced_button_toggled" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
           </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
         </child>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow11">
@@ -4377,7 +4320,6 @@ allow alternative access control.</property>
               <object class="GtkTreeView" id="advanced_search_treeview">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="model">advanced_sort</property>
                 <property name="enable_search">False</property>
                 <signal name="row-activated" handler="on_advanced_search_treeview_row_activated" swapped="no"/>
                 <child internal-child="selection">
@@ -4788,7 +4730,7 @@ allow alternative access control.</property>
             <property name="can_focus">False</property>
             <property name="xalign">0</property>
             <property name="xpad">10</property>
-            <property name="label" translatable="yes">Select file equivalence labeling to delete.File equivalence labeling will be deleted when update is applied.</property>
+            <property name="label" translatable="yes">Select file equivalence labeling to delete. File equivalence labeling will be deleted when update is applied.</property>
             <property name="justify">fill</property>
             <property name="wrap">True</property>
           </object>
diff --git policycoreutils-2.6/sepolicy/sepolicy/templates/executable.py policycoreutils-2.6/sepolicy/sepolicy/templates/executable.py
index 4b9534d..f267993 100644
--- policycoreutils-2.6/sepolicy/sepolicy/templates/executable.py
+++ policycoreutils-2.6/sepolicy/sepolicy/templates/executable.py
@@ -86,6 +86,7 @@ roleattribute system_r TEMPLATETYPE_roles;
 type TEMPLATETYPE_t;
 type TEMPLATETYPE_exec_t;
 application_domain(TEMPLATETYPE_t, TEMPLATETYPE_exec_t)
+role TEMPLATETYPE_roles types TEMPLATETYPE_t;
 
 permissive TEMPLATETYPE_t;
 """
@@ -219,7 +220,7 @@ if_program_rules="""
 
 ########################################
 ## <summary>
-##	Execute TEMPLATE in the TEMPLATETYPE domin.
+##	Execute TEMPLATETYPE_exec_t in the TEMPLATETYPE domain.
 ## </summary>
 ## <param name=\"domain\">
 ## <summary>
@@ -235,6 +236,25 @@ interface(`TEMPLATETYPE_domtrans',`
 	corecmd_search_bin($1)
 	domtrans_pattern($1, TEMPLATETYPE_exec_t, TEMPLATETYPE_t)
 ')
+
+######################################
+## <summary>
+##	Execute TEMPLATETYPE in the caller domain.
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain allowed access.
+##	</summary>
+## </param>
+#
+interface(`TEMPLATETYPE_exec',`
+	gen_require(`
+		type TEMPLATETYPE_exec_t;
+	')
+
+	corecmd_search_bin($1)
+	can_exec($1, TEMPLATETYPE_exec_t)
+')
 """
 
 if_user_program_rules="""
@@ -418,8 +438,12 @@ interface(`TEMPLATETYPE_admin',`
 if_middle_admin="""
 	')
 
-	allow $1 TEMPLATETYPE_t:process { ptrace signal_perms };
+	allow $1 TEMPLATETYPE_t:process { signal_perms };
 	ps_process_pattern($1, TEMPLATETYPE_t)
+
+    tunable_policy(`deny_ptrace',`',`
+        allow $1 TEMPLATETYPE_t:process ptrace;
+    ')
 """
 
 if_initscript_admin_types="""
diff --git policycoreutils-2.6/sepolicy/sepolicy/templates/spec.py policycoreutils-2.6/sepolicy/sepolicy/templates/spec.py
index 16a2208..d8ee42f 100644
--- policycoreutils-2.6/sepolicy/sepolicy/templates/spec.py
+++ policycoreutils-2.6/sepolicy/sepolicy/templates/spec.py
@@ -39,7 +39,7 @@ install -m 644 %{SOURCE1} %{buildroot}%{_datadir}/selinux/devel/include/contrib/
 install -d %{buildroot}%{_mandir}/man8/
 install -m 644 %{SOURCE2} %{buildroot}%{_mandir}/man8/DOMAINNAME_selinux.8
 install -d %{buildroot}/etc/selinux/targeted/contexts/users/
-install -m 644 %{SOURCE3} %{buildroot}/etc/selinux/targeted/contexts/users/DOMAINNAME_u
+install -m 644 %{SOURCE3} %{buildroot}/etc/selinux/targeted/contexts/users/DOMAINNAME_u 
 
 %post
 semodule -n -i %{_datadir}/selinux/packages/MODULENAME.pp
@@ -65,7 +65,7 @@ exit 0
 %attr(0600,root,root) %{_datadir}/selinux/packages/MODULENAME.pp
 %{_datadir}/selinux/devel/include/contrib/MODULENAME.if
 %{_mandir}/man8/DOMAINNAME_selinux.8.*
-/etc/selinux/targeted/contexts/users/DOMAINNAME_u
+/etc/selinux/targeted/contexts/users/DOMAINNAME_u 
 
 %changelog
 * TODAYSDATE YOUR NAME <YOUR@EMAILADDRESS> 1.0-1
diff --git policycoreutils-2.6/sepolicy/sepolicy/templates/test_module.py policycoreutils-2.6/sepolicy/sepolicy/templates/test_module.py
index 893a204..3a3faa6 100644
--- policycoreutils-2.6/sepolicy/sepolicy/templates/test_module.py
+++ policycoreutils-2.6/sepolicy/sepolicy/templates/test_module.py
@@ -111,7 +111,7 @@ role sepolicy_r;
 role sepolicy_source_r;
 role sepolicy_target_r;
 
-#################################
+################################# 
 #
 # Local policy
 #
diff --git policycoreutils-2.6/sepolicy/test_sepolicy.py policycoreutils-2.6/sepolicy/test_sepolicy.py
index 61dfb45..c0e7123 100644
--- policycoreutils-2.6/sepolicy/test_sepolicy.py
+++ policycoreutils-2.6/sepolicy/test_sepolicy.py
@@ -8,12 +8,12 @@ from subprocess import Popen, PIPE
 class SepolicyTests(unittest.TestCase):
 
     def assertDenied(self, err):
-        self.assert_('Permission denied' in err,
-                     '"Permission denied" not found in %r' % err)
+        self.assertTrue('Permission denied' in err,
+                        '"Permission denied" not found in %r' % err)
 
     def assertNotFound(self, err):
-        self.assert_('not found' in err,
-                     '"not found" not found in %r' % err)
+        self.assertTrue('not found' in err,
+                        '"not found" not found in %r' % err)
 
     def assertFailure(self, status):
         self.assertNotEqual(status, 0,
